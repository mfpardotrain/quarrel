{"version":3,"sources":["images/brown-logo.svg","images/order.svg","images/order-history.svg","images/straight-logo-no-icon.svg","images/market.svg","images/cows.jpg","auth.js","Header.js","FormComponents/DropDown.js","FormComponents/Input.js","apiUtils/DefaultRequests.js","FormComponents/OrderForm.js","CustomerView/CustomerOrder.js","FormComponents/DefaultTiles.js","FarmerView/Inventory.js","FormComponents/OrderView.js","FormComponents/RadioButton.js","FarmerView/Markets.js","Login/PaypalFinishConnect.js","HomePage.js","About/AboutPage.js","UserSettings.js","Login/LoginPage.js","FormComponents/PlaceOrderButton.js","PaymentForm/PaypalPayments.js","CustomerView/CartTimer.js","CustomerView/CartContent.js","CustomerView/Cart.js","PrimaryLayout.js","Login/PrivateRoute.js","Login/PapalIdentity.js","Login/Signup.js","PasswordReset.js","ForgotPassword.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","AuthContext","createContext","useAuth","useContext","Header","props","setAuthTokens","localStorage","getItem","className","to","src","logo","hideNav","exact","activeClassName","nVegetables","onClick","clear","DropDown","useReducer","state","newState","listOpen","setState","toggleList","cName","listItem","wrapper","headerSelected","header","headerTitle","list","dropDownValuesToUse","dropDownMap","dropDownValues","title","selected","dropDownTitle","dropDownContent","map","item","key","id","undefined","a","resetRequest","dropDownSelect","name","Input","type","labelClass","required","max","has_max","label","value","onChange","handleChange","placeholder","min","onKeyPress","onEnter","event","document","getElementById","click","DefaultCallbackGetRequest","endPoint","authTokens","stateHandler","url","process","useCallback","url_ending","fetch","method","headers","then","res","json","DefaultCallbackPostRequest","bodyData","setLoading","setSuccess","body","JSON","stringify","status","order_id","PaymentCallbackPostRequest","ResetPasswordCallbackPostRequest","DefaultEffectApiRequest","methodInput","dependency","refresh","abortController","AbortController","useEffect","requestData","fetchData","abort","EffectRequestWithDependency","OrderForm","selectedFarm","Vegetables","farms","requested","markets","farm_plus_market","selectedMarket","order","setOrder","request","updateOrder","target","parseFloat","getFormDetails","vegetables","getMarkets","farmNameMap","farm","farm_name","market_names","Object","keys","vegetableRows","veg","available_amount","vegetable_name","unit_weight","price","market","find","el","toString","match","totalPrice","veggie","requestedAmount","veggiePrice","isNaN","computeOrderPrice","backButton","market_id","obj","updateCart","CustomerOrder","buttonName","DefaultTiles","setClass","tile","selectedTile","class","createTiles","tileDetails","css_id","setSelectedTile","setSelectedComponent","component","clickTile","tileOnClick","nameSize","content","selectedComponent","Inventory","useState","showAddRemove","setShowAddRemove","setRefresh","toBack","VegetableDetails","update","loading","success","selectedVegetable","setSelectedVegetable","vegetable","updateVegetables","originalValue","length","amount","updateUnitWeight","weight","isLoading","response","prepareRequest","func","submitChanges","unitMap","harmlessReset","updateVegetableRows","submitOrder","veggieObj","replace","toLowerCase","veggieTiles","0","1","backButtonTypes","vegAmount","disabled","param","newBody","parse","OrderView","orderSummary","orderNumbers","query","orders","setOrderState","setQuery","dropdown","farmNames","setFarmNames","setMarkets","names","marketNames","makeMap","values","resetButton","orderRows","details","row","makeRows","orderDetails","RadioButton","valuesObj","checkedObj","setSelected","setList","requestKey","selectName","radioInput","labelChecked","labelUnchecked","container","handleSelect","checkedKeys","console","log","dayIndex","val","newList","newListIndex","findIndex","newval","splice","push","text","checked","Markets","marketState","marketList","selectedVegetables","selectedDays","substring","toUpperCase","updateRequest","updateCron","time","setVegetables","addNew","address","created","setInitialMarketVegetables","marketVegetables","vegetablesState","trueVeggies","forEach","filtered","filter","includes","marketRows","hours","Array","from","minutes","hourMap","minuteMap","endHourMap","endMinuteMap","dropdowns","dayOfWeek","hour","minute","endHour","endMinute","marketObj","select","farm_vegetable","vegList","dayList","PaypalFinishConnect","sendCode","paypalCode","setPaypalCode","setHideNav","HomePage","codeProp","location","is_farmer","farmer","order_icon","market_icon","2","3","history_icon","customer","About","UserSettings","handleSettingsChange","accountKeys","basicInfoKeys","selectedSettings","setSelectedSettings","currentSettings","history","updateSettings","LoginPage","loggedIn","setLoggedIn","username","password","loginState","setLoginState","hasCode","window","href","handleFormChange","handleLogin","k1","k2","token","setItem","is_customer","pathname","e","PlaceOrderButton","shouldPaymentFormDisplay","orderFunc","setOrderId","setShouldPaymentFormDisplay","setStartTimer","PaypalPayments","error","setError","paypalRef","useRef","setPayLoading","submitPayment","paypalExists","setPaypalExists","setLoaded","ppScript","createElement","merchantId","setAttribute","onload","paypalRender","getElementsByTagName","appendChild","paypal_sdk","Buttons","createOrder","data","actions","create","purchase_units","description","currency_code","onApprove","capture","paymentOrder","paypalOrder","paypal_merchant_id","payee","paypal_order_id","paypal_payer_id","payer","payer_id","paypal_payment_id","paymentID","payment_service","orderId","deleteCart","cartKey","setSelectedCart","setCartSuccess","onError","err","render","current","message","ref","CartTimer","setMinutes","seconds","setSeconds","startTimer","isActive","setIsActive","setTimeout","CartContent","selectedCart","tempCart","cart","parseInt","split","setMerchantId","paymentForm","cartRows","veg_data","removeFromCart","Cart","cartBar","buttonClass","PrimaryLayout","setCart","cartKeys","reduce","b","path","PrivateRoute","Component","rest","PaypalIdentity","identityExists","setIdentityExists","loaded","identityScript","paypal","use","login","Signup","signupFields","setStatus","processResponse","statusCode","Promise","all","handleSignup","connectPaypal","signupInputs","PasswordReset","token_array","confirmPassword","passwordState","setPasswordState","handlePasswordChange","resetPasswordRequest","createBodyData","ForgotPassword","email","setEmail","App","Provider","Boolean","hostname","ReactDOM","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6HAAAA,EAAOC,QAAU,IAA0B,wC,mBCA3CD,EAAOC,QAAU,IAA0B,mC,mBCA3CD,EAAOC,QAAU,IAA0B,2C,wCCA3CD,EAAOC,QAAU,IAA0B,mD,mBCA3CD,EAAOC,QAAU,IAA0B,oC,qLCA3CD,EAAOC,QAAU,IAA0B,kC,+LCE9BC,G,MAAcC,2BAEpB,SAASC,IACf,OAAOC,qBAAWH,G,qBC2BJI,EAzBA,SAAEC,GAAY,IAEnBC,EAAkBJ,IAAlBI,cAOQC,aAAaC,QAAQ,aAEvC,OACI,4BAAQC,UAAU,UAChB,kBAAC,IAAD,CAASC,GAAG,aAAY,yBAAKC,IAAKC,IAAMH,UAAY,iBACpD,yBAAKA,UAAWJ,EAAMQ,QAAU,WAAa,cAC3C,kBAAC,IAAD,CAASH,GAAG,YAAYI,OAAK,EAACC,gBAAgB,UAA9C,QACA,kBAAC,IAAD,CAASL,GAAG,aAAaK,gBAAgB,UAAzC,SACA,kBAAC,IAAD,CAASL,GAAG,YAAYK,gBAAgB,UAAxC,OAAqD,0BAAMN,UAAcJ,EAAMW,YAAc,EAAK,QAAU,YAAaX,EAAMW,cAC/H,kBAAC,IAAD,CAASN,GAAG,gBAAgBK,gBAAgB,UAA5C,YACA,kBAAC,IAAD,CAASL,GAAG,SAASO,QAf3B,WACEX,IACAC,aAAaW,SAa+BH,gBAAgB,UAAxD,c,2CCqCOI,G,MA3DE,SAAEd,GAAW,MAUAe,sBAJ7B,SAAyBC,EAAOC,GAC/B,kCAAWD,GAAUC,KAJG,CAAEC,UAAU,IAHR,mBAUnBF,EAVmB,KAUZG,EAVY,KAYpBC,EAAa,WACfD,EAAS,CAAED,UAAWF,EAAME,YAI5BG,EAAQrB,EAAMI,UAAY,IAAMJ,EAAMI,UAAY,GAClDkB,EAAWtB,EAAMI,UAAY,eAAkBiB,EAAQ,aAAe,eACtEE,EAAUvB,EAAMI,UAAY,aAAeiB,EAAQ,WAAa,aAChEG,EAAiBxB,EAAMI,UAAY,qBAAuBiB,EAAQ,mBAAqB,qBACvFI,EAASzB,EAAMI,UAAY,YAAciB,EAAQ,UAAY,YAC7DK,EAAc1B,EAAMI,UAAY,kBAAoBiB,EAAQ,gBAAkB,kBAC9EM,EAAO3B,EAAMI,UAAY,UAAYiB,EAAQ,QAAU,UAGvDO,EAAsB5B,EAAM6B,YAAc7B,EAAM6B,YAAa7B,EAAM8B,eACnEC,EAAQ/B,EAAMgC,SAAWhC,EAAMgC,SAAWhC,EAAMiC,cAE9CC,EACFN,EAAoBO,KAAI,SAACC,GAAD,OACpB,wBAAIhC,UAAYY,EAAME,SAAWI,EAAW,WACxCe,IAAKrC,EAAM6B,YAAcO,EAAKE,QAAKC,EACnC3B,QAAO,sBAAE,sBAAA4B,EAAA,sEACcxC,EAAMyC,eADpB,OAEQzC,EAAM0C,eAAeN,GACrBhB,IAHR,4CAMPpB,EAAM6B,YAAcO,EAAKO,KAAMP,MAI7C,OACI,yBAAKhC,UAAWmB,GACZ,yBAAKnB,UAAWY,EAAME,SAAWM,EAAiBC,EAC7Cb,QAAS,WAAQQ,MAGlB,yBAAKhB,UAAWsB,GAAeK,IAEnC,wBAAI3B,UAAYY,EAAME,SAAWS,EAAO,YAClCO,MCxBHU,EA9BD,SAAE5C,GAEd,IAII6C,OAAsBN,IAAfvC,EAAM6C,KAAqB,OAAS7C,EAAM6C,KAEjDC,GADW9C,EAAM+C,SACJ/C,EAAM8C,WAAa9C,EAAM8C,WAAa,eACnDE,EAAMhD,EAAMiD,QAAUjD,EAAMiD,aAAUV,EAE1C,OACE,yBAAKnC,UAAWJ,EAAMI,WACJ,eAAf0C,GAA+B,2BAAO1C,UAAW0C,GAAa9C,EAAMkD,OACrE,2BACE9C,UAAU,aACVuC,KAAM3C,EAAM2C,KACZE,KAAMA,EACNM,MAAOnD,EAAMmD,MACbC,SAAUpD,EAAMqD,aAChBC,YAAatD,EAAMsD,YACnBN,IAAKA,EACLO,IAAK,EACLC,WAAYxD,EAAMyD,SArBN,SAACC,GACA,UAAdA,EAAMrB,KAAkBsB,SAASC,eAAe,gBAAgBC,WAsBjD,gBAAff,GAAgC,2BAAO1C,UAAW0C,GAAa9C,EAAMkD,SCvBrE,SAASY,EAA0BC,EAAUC,EAAYC,GAC5D,IAAIC,EAAMC,mEAAgCJ,EAEtCtC,EAAS,CACT,eAAgB,mBAChB,cAAiB,SAAWuC,GAYhC,OATuBI,sBAAW,uCAAC,WAAOC,GAAP,SAAA7B,EAAA,sEACzB8B,MAAMJ,EAAMG,EAAY,CAC1BE,OAAQ,MACRC,QAAS/C,IAERgD,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAAI,OAAIV,EAAaU,MANA,2CAAD,sDAO/B,IAMA,SAASC,EAA2Bb,EAAUc,EAAUb,GAC3D,IAAIE,EAAMC,mEAAgCJ,EAEtCtC,EAAS,CACT,eAAgB,mBAChB,cAAiB,SAAWuC,GAkBhC,OAfuBI,sBAAW,uCAAC,WAAOU,EAAYC,GAAnB,2BAAAvC,EAAA,6DAA+BrB,EAA/B,gCAC/B2D,GAAW,GADoB,SAEzBR,MAAMJ,EAAK,CACbK,OAAQ,OACRC,QAAS/C,EACTuD,KAAMC,KAAKC,UAAUL,KAEpBJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFI,EAAWJ,EAAKQ,QAChBhE,GAAYA,EAASwD,EAAKS,aAVH,OAa/BN,GAAW,GAboB,2CAAD,wDAc/B,CAACD,IAKD,SAASQ,EAA2BtB,EAAUC,GACjD,IAAIE,EAAMC,mEAAgCJ,EAEtCtC,EAAS,CACT,eAAgB,mBAChB,cAAiB,SAAWuC,GAkBhC,OAfuBI,sBAAW,uCAAC,WAAOU,EAAYC,EAAYF,GAA/B,2BAAArC,EAAA,6DAAyCrB,EAAzC,gCAC/B2D,GAAW,GADoB,SAEzBR,MAAMJ,EAAK,CACbK,OAAQ,OACRC,QAAS/C,EACTuD,KAAMC,KAAKC,UAAUL,KAEpBJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFI,EAAWJ,EAAKQ,QAChBhE,GAAYA,EAASwD,EAAKS,aAVH,OAa/BN,GAAW,GAboB,2CAAD,0DAc/B,CAACd,IAID,SAASsB,EAAiCvB,GAC7C,IAAIG,EAAMC,mEAAgCJ,EAEtCtC,EAAS,CAAE,eAAgB,oBAiB/B,OAfuB2C,sBAAW,uCAAC,WAAOU,EAAYC,EAAYF,GAA/B,2BAAArC,EAAA,6DAAyCrB,EAAzC,gCAC/B2D,GAAW,GADoB,SAEzBR,MAAMJ,EAAK,CACbK,OAAQ,OACRC,QAAS/C,EACTuD,KAAMC,KAAKC,UAAUL,KAEpBJ,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GACFI,EAAWJ,EAAKQ,QAChBhE,GAAYA,EAASwD,EAAKS,aAVH,OAa/BN,GAAW,GAboB,2CAAD,0DAc/B,IAMA,SAASS,EAAwBxB,EAAUyB,EAAavB,EAAcD,GAA6D,IAAjDyB,EAAgD,uDAAnC,KAAMT,EAA6B,uDAAtB,KAAMU,EAAgB,uDAAN,KAC3HxB,EAAMC,mEAAgCJ,EAEtCtC,EAAS,CACT,eAAgB,mBAChB,cAAiB,SAAWuC,GAG5B2B,EAAkB,IAAIC,gBAE1BC,qBAAU,WAAM,4CACZ,sBAAArD,EAAA,sEAEQ8B,MAAMJ,EAAK,CACPK,OAAQiB,EACRhB,QAAS/C,EACTuD,KAAMA,IALlB,cAQSL,OACAF,MAAK,SAAAqB,GAAW,OAAI7B,EAAa6B,MAT1C,4CADY,sBAgBZ,OAhBa,WAAD,wBAcZC,GAGIJ,EAAgBK,UAErB,CAACP,EAAYC,IAGb,SAASO,EAA4BlC,EAAUyB,EAAavB,EAAcD,GAA6D,IAAjDyB,EAAgD,uDAAnC,KAAMT,EAA6B,uDAAtB,KAAMU,EAAgB,uDAAN,KAE/HxB,EAAMC,mEAAgCJ,EAEtCtC,EAAS,CACT,eAAgB,mBAChB,cAAiB,SAAWuC,GAG5B2B,EAAkB,IAAIC,gBAE1BC,qBAAU,WAAM,4CAEZ,sBAAArD,EAAA,sEAGQ8B,MAAMJ,EAAK,CACPK,OAAQiB,EACRhB,QAAS/C,EACTuD,KAAMA,IANlB,cASSL,OACAF,MAAK,SAAAqB,GAAW,OAAI7B,EAAa6B,MAV1C,4CAFY,sBAoBZ,OAJIL,GAhBS,WAAD,wBAiBRM,GAIAJ,EAAgBK,UAErB,CAACP,EAAYC,I,UCqBLQ,EArLG,SAAElG,GAAY,IAEpBgE,EAAenE,IAAfmE,WAFmB,MAmBDjD,sBAJ1B,SAAsBC,EAAOC,GACzB,OAAO,2BAAKD,GAAUC,KAZP,CACfkF,cAAc,EACdC,WAAY,GACZC,MAAO,GACPC,UAAW,KACXzD,KAAM,QACN0D,SAAS,EACTC,kBAAkB,EAClBC,gBAAgB,IAZO,mBAmBpBC,EAnBoB,KAmBbC,EAnBa,KAqC3BpB,EAAwB,QAAS,OAHhB,SAACqB,GAAcD,EAAS,CAAEN,MAAOO,MAGA5C,GAElD,IAgBM6C,EAAc,SAACnD,GACjBiD,EAAS,CAAEL,UAAU,2BAAKI,EAAMJ,WAAZ,kBAAwB5C,EAAMoD,OAAOnE,KAAOoE,WAAWrD,EAAMoD,OAAO3D,YAgBtF6D,EAAiBlD,EAA0B,eAAgBE,GAb3C,SAACiD,GACnBN,EAAS,CAAE,WAAcM,OAavBC,EAAapD,EAA0B,WAAYE,GAVtC,SAACuC,GAChBI,EAAU,CAAC,QAAWJ,OA0BtBY,EAAcT,EAAML,MAAMlE,KAAI,SAACiF,GAAD,MAAW,CACzC,KAAQA,EAAKC,UACb,GAAMD,EAAK9E,OAKTgF,EADaC,OAAOC,KAAKd,EAAMH,SACLpE,KAAI,SAACE,GAAD,OAASqE,EAAMH,QAAQlE,GAAd,QAGvCoF,EADUF,OAAOC,KAAKd,EAAMN,YAEtBjE,KAAI,SAACE,GACT,IAAIqF,EAAMhB,EAAMN,WAAW/D,GACvBY,IAAUjD,EAAMgD,KAAM0E,EAAIC,iBAClC,OACI,yBAAKvH,UAAoC,IAAzBsH,EAAIC,iBAAyB,4BAA8B,iBACvE,yBAAKvH,UAAU,cACX,0BAAMA,UAAU,kBAAmBsH,EAAIE,gBACvC,yBAAKxH,UAAU,qBACX,0BAAMA,UAAU,0BAA2BsH,EAAIC,iBAAmBD,EAAIG,YAAc,cACpF,0BAAMzH,UAAU,mBAAmB,IAAMsH,EAAII,MAAQ,QAAUJ,EAAIG,aACrC,IAAzBH,EAAIC,kBACD,kBAAC,EAAD,CAAOhF,KAAM+E,EAAIE,eACjBvE,aAAcwD,EACd1D,MAAOuD,EAAMgB,IACbxE,MAAOwE,EAAIG,YACXvE,YAAY,IACZT,KAAK,SACLI,QAASA,EACT7C,UAAU,yBAUhC+F,EAAgBO,EAAMP,cAAgB,yBAAK/F,UAAU,iBAAiBsG,EAAMP,cAC5E4B,EAASrB,EAAMF,kBAAoBE,EAAMH,QAAQyB,MAAK,SAAAC,GAAE,OAAIA,EAAG3F,GAAG4F,aAAexB,EAAMF,iBAAiB2B,MAAM,cAAe,MAAIxF,KACjIyF,EAvDkB,WAAQ,IAAIA,EAAa,EAAG,GAAG1B,EAAMN,YAAcM,EAAMJ,UAAW,CAAC,IAAD,WAE5E+B,GACJ,IAAIC,EAAkB5B,EAAMJ,UAAU+B,GAElCE,EAAc7B,EAAMN,WAAW4B,MAAK,SAAAC,GAAE,OAAIA,EAAGL,iBAAmBS,KAAQP,MAC5EM,GAAcE,EAAkBC,GAJpC,IAAI,IAAIF,KAAU3B,EAAMJ,UAAY,EAA5B+B,GASZ,OAAOG,MAAMJ,GAAc,EAAIA,EA4ChBK,GAEnB,OACI,oCACA,yBAAKrI,UAAU,SACf,yBAAKA,UAAU,cACX,yBAAKA,UAAU,QACrBJ,EAAM0I,WACI,yBAAKtI,UAAU,sBACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAUsC,eAtGX,SAAC0E,GAIhBT,EAAS,CAAER,aAAciB,EAAMd,UAAW,OAC1CY,EAAWE,EAAK9E,KAkGQL,cAAc,kBACdJ,YAAasF,EACb1E,aArHN,kBAAMkE,EAAS,CAACL,UAAW,GACXE,kBAAkB,EAClBL,cAAc,EACdM,gBAAgB,EAChBL,WAAY,SAoHlC,yBAAKhG,UAAU,kBACVsG,EAAMP,cACP,kBAAC,EAAD,CAAUzD,eArGT,SAACqF,GAClB,IAAIY,EAAYjC,EAAMH,QAAQyB,MAAK,SAAAC,GAAE,OAAIA,EAAGtF,OAASoF,KAAQzF,GACzD8E,EAAOV,EAAMP,aAAa7D,GAAK,IAAMqG,EACzC3B,EAAeI,GACfT,EAAS,CAAEH,iBAAkBY,KAkGLnF,cAAc,kBACdH,eAAgBwF,EAChB7E,aAnIP,kBAAMkE,EAAS,CAACL,UAAW,GACXE,kBAAkB,EAClBC,gBAAgB,EAChBL,WAAY,WAqIvCD,GAAgB,0BAAM/F,UAAU,aAAasG,EAAMP,aAAaxD,MAAQ+D,EAAMF,iBAAoB,OAASuB,EAAU,KACvH,yBAAK3H,UAAU,cACVsG,EAAMP,cAAgBsB,IAG/B,6BACKf,EAAMF,kBAAqB,yBAAKpG,UAAU,eACvC,8CACmBgI,GAEnB,6BACA,4BAAQvF,KAAK,SACLzC,UAAU,8BACVQ,QAAS,WAvGN,IAACgI,IAuG4BlC,EAAMJ,UAtG3CiB,OAAOC,KAAKoB,GAClBzG,KAAI,SAACE,GAAD,OAASmG,MAAMI,EAAIvG,YAAgBuG,EAAIvG,MAsGfrC,EAAM6I,WAAWnC,EAAOA,EAAMN,WAAYM,EAAMP,aAAc4B,EAAQK,KAE3F,kDCpKLU,EAbO,SAAE9I,GAEpB,OACI,kBAAC,EAAD,CACCoH,MAAM,EACN2B,WAAW,cACX/F,KAAK,EACL6F,WAAY7I,EAAM6I,WAClBH,WAAY1I,EAAM0I,c,QC4BZM,EAvCM,SAAEhJ,GAEtB,IAKMiJ,EAAW,SAACC,GACjB,OAA2B,IAAvBlJ,EAAMmJ,aACFD,EAAKE,MAEL,UAKHC,EADK9B,OAAOC,KAAKxH,EAAMsJ,aAEvBnH,KAAI,SAAAE,GACR,IAAI6G,EAAOlJ,EAAMsJ,YAAYjH,GAC7B,OACC,yBAAKjC,UAAW6I,EAASC,GACpB7G,IAAKA,EACLC,GAAI4G,EAAKK,OACT3I,QAAS,YArBC,SAACsI,GAClBlJ,EAAMwJ,gBAAgBN,EAAKvG,MAC3B3C,EAAMyJ,qBAAqBP,EAAKQ,WAmBTC,CAAUT,GACblJ,EAAM4J,aAAe5J,EAAM4J,YAAYV,KACxD,0BAAM9I,UAAWJ,EAAM6J,UAAWX,EAAKvG,MACtCuG,EAAKY,SAAWZ,EAAKY,YAM1B,OACC,oCACET,EACArJ,EAAM+J,mBAAqB,yBAAK3J,UAAU,gBAAgBkC,GAAG,iBAAiBtC,EAAM+J,qBCkSzEC,EA7TG,SAAEhK,GAEhB,IAF2B,EAGUiK,oBAAS,GAHnB,mBAGvBd,EAHuB,KAGTK,EAHS,OAIuBS,oBAAS,GAJhC,mBAIpBF,EAJoB,KAIDN,EAJC,OAKeQ,oBAAS,GALxB,mBAKpBC,EALoB,KAKLC,EALK,OAMGF,oBAAS,GANZ,mBAMpBvE,EANoB,KAMX0E,EANW,KAQxB1B,EAAa,SAAC2B,EAAQX,GAAgB,OAAO,4BAAQtJ,UAAU,cAC9DkC,GAAG,OACH1B,QAAU,WAAO4I,EAAgBa,GACQZ,EAAqBC,GACrBU,GAAY1E,GACZjD,MAErC,iCAEAuB,EAAenE,IAAfmE,WAjBmB,MAmCDjD,sBAJ1B,SAAsBC,EAAOC,GACzB,OAAO,2BAAKD,GAAUC,KAbP,CACf4B,KAAM,GACNuD,WAAY,GACZkE,iBAAkB,GAClBhE,UAAW,GACXiE,OAAQ,GACRC,SAAS,EACTC,QAAS,KACTC,kBAAmB,GACnBtD,KAAM,OA5BiB,mBAmCpBV,EAnCoB,KAmCbC,EAnCa,KAuDrBgE,EAAuB,SAACC,GAC1B,IAAIF,EAtDgB,oBAsDIE,EAAgCA,EAAYlE,EAAM4D,iBAAiBtC,MAAK,SAAAC,GAAE,OAAIA,EAAG3F,KAAOsI,EAAUtI,MAC1HqE,EAAS,CAAE,kBAAqB+D,IAvDZ,oBAwDpBE,GAAiCT,GAAiB,IAGhDtD,EAAc,SAACnD,GACjBiD,EAAS,CAAEL,UAAU,2BAAKI,EAAMJ,WAAZ,kBAAwB5C,EAAMoD,OAAOnE,KAAOoE,WAAWrD,EAAMoD,OAAO3D,YAGtF0H,EAAmB,SAACnH,GACtB,GAhEoB,oBAgEjBgD,EAAMgE,kBAAuC,CAChD,IAAII,EAAgBpE,EAAM4D,iBAAiBtC,MAAK,SAAAC,GAAE,OAAIA,EAAG3F,KAAOoE,EAAMgE,kBAAkBpI,MAAIoB,EAAMoD,OAAOnE,MACzGe,EAAMoD,OAAO3D,MAAM4H,OAAS,EAAIpE,EAAS,CAAE4D,OAAO,2BAAK7D,EAAM6D,QAAZ,kBAAqB7G,EAAMoD,OAAOnE,KAAOe,EAAMoD,OAAO3D,UACvEwD,EAAS,CAAE4D,OAAO,2BAAK7D,EAAM6D,QAAZ,kBAAqB7G,EAAMoD,OAAOnE,KAAOmI,MAC1F,IAAIE,EAAStE,EAAMJ,UAAYI,EAAMJ,UAAUiB,OAAOC,KAAKd,EAAMJ,WAAW,IAAM,EAC5D,mBAAtB5C,EAAMoD,OAAOnE,OAA8Be,EAAMoD,OAAO3D,MAAM4H,OAAS,EAC3BpE,EAAS,CAAEL,UAAU,eAAI5C,EAAMoD,OAAO3D,MAAQ6H,KAC9CrE,EAAS,CAACL,UAAW,WAE7DK,EAAS,CAAE4D,OAAO,2BAAK7D,EAAM6D,QAAZ,kBAAqB7G,EAAMoD,OAAOnE,KAAOe,EAAMoD,OAAO3D,UACjD,mBAAtBO,EAAMoD,OAAOnE,MAA6BgE,EAAS,CAAEL,UAAU,eAAI5C,EAAMoD,OAAO3D,MAAQ,MAI1F8H,EAAmB,SAACC,GACtBvE,EAAS,CAAC4D,OAAO,2BAAK7D,EAAM6D,QAAZ,kBAAqBW,EAAOrI,KAAOqI,EAAOvI,UAGxDmC,EAAa,SAACqG,GAAgBxE,EAAS,CAAE6D,QAASW,KAClDpG,EAAa,SAACqG,GAAezE,EAAS,CAAE8D,QAASW,KAIjD3I,EAAe,WAAQsC,EAAW,MACX4B,EAAS,CAAC9D,KAAM,KAChB8D,EAAS,CAACL,UAAW,KACrBK,EAAS,CAAC4D,OAAQ,KAClB5D,EAAS,CAAC+D,kBAAmB,KAC7BP,GAAiB,IAIxCkB,EAAiB,SAACzC,EAAK0C,GACd/D,OAAOC,KAAKoB,GAClBzG,KAAI,SAACE,GAAD,OAASiJ,EAAK1C,EAAIvG,YAAgBuG,EAAIvG,OAInDkD,EAAwB,QAAS,OA7DjB,SAACqB,GACbD,EAAS,CAAES,KAAMR,EAAO,KAAP,OA4D4B5C,GACjDiC,EAA4B,iBAAmBS,EAAMU,KAAM,OAtD/B,SAACH,GACzBN,EAAS,CAAE,iBAAoBM,MAqDoDjD,EAAY0C,EAAMU,KAAM,KAAM1B,GACrHO,EAA4B,eAAiBS,EAAMU,KAAO,KAAM,OA3D1C,SAACH,GACnBN,EAAS,CAAE,WAAcM,MA0DyDjD,EAAY0C,EAAMU,KAAM,KAAM1B,GAGpH,IAAM6F,EAAgB3G,EAA2B,iBAAmB8B,EAAMU,KAAMV,EAAO1C,GAIjFwH,EADW,CAAC,MAAO,MAAO,OAAQ,SACfrJ,KAAI,SAAA8F,GAAE,MAAK,CAAC,KAAQA,EAAI,KAAQ,cAAe,GAAMA,MACxEwD,EAAgB,kBAAM,MAExBC,EALe,CAAC,iBAAkB,cAAe,QAAS,eAM/CvJ,KAAI,SAACE,GAkBR,MAjBiB,gBAARA,EACT,kBAAC,EAAD,CAAOM,KAAMN,EACNA,IAAKA,EACLQ,KAAK,OACLM,MAAOuD,EAAM6D,OAAOlI,IACpBgB,aAAcwH,EACd3H,MAAOb,EACPjC,UAAU,2BACVkD,YAAaoD,EAAMgE,kBAAkBrI,KAE5C,kBAAC,EAAD,CAAUK,eAAgBuI,EAChBhJ,cAAeI,EACfR,YAAa2J,EACbnJ,IAAKA,EACLI,aAAcgJ,EACdzJ,SAAU0E,EAAM6D,OAAO1C,iBAOvC8D,EAActG,EAA2B,mBAAoBrB,GA2E/DyG,EAAU/D,EAAM+D,QAIdmB,EADcrE,OAAOC,KAAKd,EAAMN,YAEpBjE,KAAI,SAAAE,GACd,IAAIM,EAAO+D,EAAMN,WAAW/D,GAAKuF,eAEjC,MACI,CACIwB,MAAO,kBACPzG,KAAMA,EACNL,GALCoE,EAAMN,WAAW/D,GAAKC,GAMvBiH,OAAQ5G,EAAKkJ,QAAQ,OAAQ,KAAKC,kBAM5CC,EAAc,SAAC5C,GACjB,OACA,oCACA,yBAAK/I,UAAU,4BACX,kBAAC,EAAD,CAAckJ,YAAasC,EACbnC,qBAAsBA,EACtBN,aAAcA,EACdK,gBAAiBA,EACjBI,YAAae,EACbd,SAAS,uBAMzBjB,EAAM,CACdoD,EAAG,CACF5C,MAAO,mBACPzG,KA1PyB,kBA2PzB4G,OAAQ,iBAET0C,EAAG,CACF7C,MAAO,mBACPzG,KAAM,eACG4G,OAAQ,mBACRG,UAAWqC,EAAY5C,KAU3B+C,GAAoC,iBAAjB/C,EA3QC,oBA2QiCA,EACjCT,GAAW,GAAO,IACC,IAAjBS,EACFT,EAAW,eAAgBqD,GAAY,IAAU/L,EAAM0I,WAE/E,OACI,oCACA,yBAAKtI,UAAU,SACf,yBAAKA,UAAU,cACX,yBAAKA,UAAU,YACV+I,EAAe+C,GAAkBlM,EAAM0I,WACxC,0BAAMtI,UAAU,aAtRJ,oBAsQjB+I,EAAoD,iBAAjBA,EAAyCA,EACvEzC,EAAMgE,kBAA4BhE,EAAMN,WAAW4B,MAAK,SAAAC,GAAE,OAAIA,EAAG3F,KAAOoE,EAAMgE,kBAAkBpI,MAAIsF,eAC/F,cAgBT,yBAAKxH,UAAU,4BACX,kBAAC,EAAD,CAAckJ,YAAaV,EACbmB,kBAAmBA,EACnBN,qBAAsBA,EACtBN,aAAcA,EACdK,gBAAiBA,EACjBI,YA3PL,SAAC5H,GAClB2E,EAAS,CAAE9D,KAAMb,EAASW,OApCN,oBAqCpBX,EAASW,MAA4BgI,EArCjB,mBAsCpBP,GAAY1E,IAyPUmE,SAAS,sBAG1BK,GAAiB,yBAAK9J,UAAU,wBAtJnB,WAClB,IAAIsH,EAAMhB,EAAMN,WAAW4B,MAAK,SAAAC,GAAE,OAAIA,EAAG3F,KAAOoE,EAAMgE,kBAAkBpI,MACpE6J,EAAe5E,OAAOC,KAAKd,EAAMJ,WAAW,IAAMI,EAAMJ,UAAUiB,OAAOC,KAAKd,EAAMJ,WAAW,IAAM,EAAKI,EAAMJ,UAAUoB,EAAIE,gBAAkB,KACpJ,OACI,yBAAKxH,UAAU,cACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,sBAAsBsL,GACrC,4BAAQ7I,KAAK,SACLzC,UAAU,8BACVQ,QAAS,WACD2K,EAAczG,EAAYC,GAC1BqF,GAAY1E,IAGpB0G,SAAU1F,EAAM8D,SAElB9D,EAAM8D,SAAW,kBAAC,aAAD,CAAYA,QAAS9D,EAAM8D,WAC3C9D,EAAM8D,SAAW,oDAG5B,yBAAKpK,UAAU,wBACX,yBAAKA,UAAU,uBACX,0BAAMA,UAAU,oBAAhB,2BACA,yBAAKA,UAAU,sBACX,0BAAMA,UAAU,2BAA4BsH,EAAIC,iBAAmB,IAAMD,EAAIG,YAAc,cACvF,kBAAC,EAAD,CAAOlF,KAAM+E,EAAIE,eACbvE,aAAcwD,EACd1D,MAAOuD,EAAMgB,IACbxE,MAAO,KACPI,YAAY,IACZT,KAAK,SACLI,SAAS,EACT7C,UAAU,qCAGtB,yBAAKA,UAAU,kBACX,4BAAQyC,KAAK,SACLzC,UAAU,sCACVQ,QAAS,WACDyK,EAAe3E,EAAMJ,UAAWkC,OAChC6C,EAAe3E,EAAM6D,QAAS,SAAA8B,GAAK,OAAqB,IAAjBA,EAAMtB,UAC7C,IAAIuB,EAAUrH,KAAKsH,MAAMtH,KAAKC,UAAUwB,IACxC4F,EAAQzJ,KAAO,gBACf8I,EAAY7G,EAAYC,EAAYuH,EAASlC,IAGrDgC,SAAU1F,EAAM8D,UAErB9D,EAAM8D,SAAW,8BAAO,OAAS2B,EAAY,IAAMzE,EAAIG,cAE1D,4BAAQhF,KAAK,SACLzC,UAAU,yCACVQ,QAAS,WACDyK,EAAe3E,EAAMJ,UAAWkC,OAChC6C,EAAe3E,EAAM6D,QAAS,SAAA8B,GAAK,OAAqB,IAAjBA,EAAMtB,UAC7C,IAAIuB,EAAUrH,KAAKsH,MAAMtH,KAAKC,UAAUwB,IACxC4F,EAAQhG,UAAYiB,OAAOC,KAAK8E,EAAQhG,WAAWnE,KAAI,SAAA8F,GAAE,MAAI,CAAC,eAAEA,GAA8B,EAAzBqE,EAAQhG,UAAU2B,QAAY,GAAG,GACtGqE,EAAQzJ,KAAO,mBACf8I,EAAY7G,EAAYC,EAAYuH,EAASlC,IAGrDgC,SAAU1F,EAAM8D,UAErB9D,EAAM8D,SAAW,8BAAO,UAAY2B,EAAY,IAAMzE,EAAIG,kBAuFpBJ,IAlSzC,oBAmSff,EAAMgE,mBAAyC,yBAAKtK,UAAU,sBAAsBsL,KAnSrE,oBAoSZhF,EAAMgE,oBAA2C,yBAAKtK,UAAU,eACpE,4BAAQyC,KAAK,SACLzC,UAAU,8BACVQ,QAAS,WACO2K,EAAczG,EAAYC,GAC1BqF,GAAY1E,IAG5B0G,SAAU1F,EAAM8D,SAElB9D,EAAM8D,SAAW,kBAAC,aAAD,CAAYA,QAAS9D,EAAM8D,WAC3C9D,EAAM8D,SAAW,mDAEpB,iCAECC,GAAW,IAAQA,EAAU,MAAS,uDACvCA,GAAW,MAAQ,mFC/LpB+B,EA1HG,SAAExM,GAAY,IAGpBgE,EAAenE,IAAfmE,WAHmB,EAKGiG,oBAAS,GALZ,mBAKpBvE,EALoB,KAKX0E,EALW,WAkBKrJ,sBAJhC,SAAsBC,EAAOC,GACzB,OAAO,2BAAKD,GAAUC,KARP,CACfwL,aAAc,GACdC,aAAc,GACdC,OAAO,EACP9J,KAAM,UAXiB,mBAkBpB+J,EAlBoB,KAkBZC,EAlBY,KAyBrBC,EAAW,SAACC,GACd,IAAI5J,EAA0B,YAAlB4J,EAASlK,KAAqBmK,EAAUhF,MAAK,SAAAC,GAAE,OAAIA,EAAGZ,YAAc0F,EAASpK,QAAML,GAAG4F,WACnE,cAAlB6E,EAASlK,KAAuB0D,EAAQyB,MAAK,SAAAC,GAAE,OAAIA,EAAGtF,OAASoK,EAASpK,QAAML,GAAG4F,WAClF6E,EAASpK,KAAKkJ,QAAQ,OAAQ,KAAKC,cAC/Ce,EAAc,CAACF,MAAM,2BAAKC,EAAOD,OAAb,kBAAqBI,EAASlK,KAAOM,OA7BlC,EAgCK8G,mBAAS,IAhCd,mBAgCtB+C,EAhCsB,KAgCXC,EAhCW,OAiCChD,mBAAS,IAjCV,mBAiCtB1D,EAjCsB,KAiCb2G,EAjCa,KAmC3B3H,EAAwB,UAAW,QAdV,SAACqB,GACtBiG,EAAc,CAAC,aAAgBjG,MAa0B5C,EAAY4I,EAAOD,MAAO1H,KAAKC,UAAU0H,EAAOD,OAAQjH,GACrHH,EAAwB,QAAS,MAAO0H,EAAcjJ,EAAY,KAAM,KAAM0B,GAC9EH,EAAwB,cAAe,MAAO2H,EAAYlJ,EAAY,KAAM,KAAM0B,GAElF,IA2BIyH,EAAQ5F,OAAOC,KAAKwF,GAAW7K,KAAI,SAAA8F,GAAE,OAAI+E,EAAU/E,GAAIZ,aACvD+F,EAAc7F,OAAOC,KAAKjB,GAASpE,KAAI,SAAA8F,GAAE,OAAI1B,EAAQ0B,GAAItF,QACvD0K,EAAU,SAACC,EAAQ3K,GAAT,OAAkB2K,EAAOnL,KAAI,SAAA8F,GAAE,MAAK,CAAC,KAAQA,EAAI,KAAQtF,OACnE8I,EAAgB,kBAAM,MAEtB8B,EAAc,4BAAQnN,UAAU,2BAClCkC,GAAG,OACqB1B,QAAU,WAAOiM,EAAc,CAACF,OAAO,IACtBvC,GAAY1E,KAC1B,gCAG/B,OACI,yBAAKtF,UAAU,sBACX,yBAAKA,UAAU,QACVJ,EAAM0I,WACP,yBAAKtI,UAAU,sBACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAAUsC,eAAgBoK,EAClB7K,cAAc,gBACdJ,YAAawL,EAtBrB,CAAC,WAAY,OAAQ,cAsBqB,UAClC5K,aAAcgJ,KAG1B,yBAAKrL,UAAU,kBACX,kBAAC,EAAD,CAAUsC,eAAgBoK,EAClB7K,cAAc,cACdJ,YAAawL,EAAQF,EAAO,WAC5B1K,aAAcgJ,KAG1B,yBAAKrL,UAAU,kBACX,kBAAC,EAAD,CAAUsC,eAAgBoK,EAClB7K,cAAc,gBACdJ,YAAawL,EAAQD,EAAa,aAClC3K,aAAcgJ,KAG1B,yBAAKrL,UAAU,kBACX,kBAAC,EAAD,CAAUsC,eAAgBoK,EAClB7K,cAAc,oBACdJ,YAAawL,EA1CtB,CAAC,gBAAiB,mBAAoB,SA0CI,cACjC5K,aAAcgJ,KAGzB8B,IAGT,yBAAKnN,UAAU,iBACVwM,EAAOH,aAAa1B,OAAS,GAlErB,WACjB,IAAIyC,EAAYZ,EAAOH,aACnBgB,EAAUlG,OAAOC,KAAKgG,GAAWrL,KAAI,SAAAE,GACrC,IAAIqL,EAbK,SAACA,GACd,OACAnG,OAAOC,KAAKkG,GAAKvL,KAAI,SAAAE,GACjB,OACI,yBAAKjC,UAAU,sBAAsBsN,EAAIrL,OASnCsL,CAASH,EAAUnL,IAC7B,OAAO,yBAAKjC,UAAU,qBAAqBsN,MAE3CjM,EAAS,yBAAKrB,UAAU,gCAAgCmH,OAAOC,KAAKgG,EAAU,IAAIrL,KAAI,SAAAE,GAAG,OAAI,yBAAKjC,UAAU,kCAAkCiC,OAClJ,OACI,yBAAKjC,UAAU,2BACVqB,EACAgM,GAwDkCG,M,MChEpCC,MAtDf,YAAyG,IAAlFzN,EAAiF,EAAjFA,UAAW0N,EAAsE,EAAtEA,UAAWC,EAA2D,EAA3DA,WAAYC,EAA+C,EAA/CA,YAAaC,EAAkC,EAAlCA,QAASC,EAAyB,EAAzBA,WAAYC,EAAa,EAAbA,WAGrF9M,EAAQjB,EAAY,IAAMA,EAAY,GACtCgO,EAAahO,EAAY,cAAgBiB,EAAQ,eAAiB,cAClEgN,EAAejO,EAAY,gBAAkBiB,EAAQ,iBAAmB,gBACxEiN,EAAiBlO,EAAY,kBAAoBiB,EAAQ,mBAAqB,kBAC9EkN,EAAYnO,EAAY,qBAAuBiB,EAAQ,sBAAwB,qBAE7EmN,EAAe,SAAC9K,GACpB,IAAI+K,EAAclH,OAAOC,KAAKuG,GAC9BW,QAAQC,IAAIF,GACZC,QAAQC,IAAIjL,EAAMoD,OAAOnE,MACzB,IAAIiM,EAAWH,EAAYzG,MAAK,SAAA3F,GAAG,OAAI0L,EAAW1L,GAAKC,GAAG4F,aAAexE,EAAMoD,OAAOxE,MAClFuM,EAAMd,EAAWa,GAAUtM,GAE3BwM,EAAU7J,KAAKsH,MAAMtH,KAAKC,UAAU4I,IAEpCiB,EAAeD,EAAQE,WAAU,SAAA/G,GAAE,OAAIA,IAAO4G,KAC9CI,GAAWlB,EAAWa,GAAU5M,SAEpCgM,EAAYY,EAAUT,EAAYc,IAChB,IAAlBF,EAAsBD,EAAQI,OAAOH,EAAc,GAAKD,EAAQK,KAAKN,GACrEZ,EAAQC,EAAYY,IA4BtB,OAzBsBvH,OAAOC,KAAKuG,GACD5L,KAAI,SAAAE,GAC/B,IAAI4F,EAAK8F,EAAW1L,GAChBc,EAAQ8E,EAAGjG,SACXW,EAAOsF,EAAG3F,GACVA,EAAK2F,EAAG3F,GACR8M,EAAOnH,EAAGtF,KAEd,OACA,yBAAKvC,UAAWmO,GACd,2BAAOnO,UAAW+C,EAAQkL,EAAeC,GAAiBc,EACxD,2BAAOhP,UAAWgO,EACXvL,KAAK,WACLF,KAAMA,EACNQ,MAAOA,EACPC,SAAUoL,EACVa,QAASlM,EACTb,GAAIA,EACJD,IAAKM,UC8QT2M,EApTC,SAACtP,GACb,IADuB,EAGiBiK,oBAAS,GAH1B,mBAGhBd,EAHgB,KAGFK,EAHE,OAI2BS,oBAAS,GAJpC,mBAIhBF,EAJgB,KAIGN,EAJH,OAKOQ,oBAAS,GALhB,mBAKhBvE,EALgB,KAKP0E,EALO,KAOjB1B,EAAc,4BAAQtI,UAAU,cAClCkC,GAAG,OACH1B,QAAS,WACL4I,GAAgB,GAChBC,GAAqB,GACrBW,GAAY1E,GACZjD,MAEF,gCAEEuB,EAAenE,IAAfmE,WAMFuL,EAAc,CAChBC,WAAY,GACZ5I,QAAS,GACTR,WAAY,GACZqJ,mBAAoB,GACpBC,aATO,CAAC,SAAU,UAAW,YAAa,WAAY,SAAU,WAAY,UAC5DvN,KAAI,SAAA8F,GAAE,MAAK,CAAE,KAAQA,EAAI,KAAQ,YAAa,GAAMA,EAAG0H,UAAU,EAAG,GAAGC,cAC1D,UAAY,MAQzCpF,SAAS,EACTC,QAAS,KACTzI,UAAU,GA/BS,MAsCOjB,sBAJ9B,SAAsBC,EAAOC,GACzB,OAAO,2BAAKD,GAAUC,KAG6BsO,GAtChC,mBAsChBhJ,EAtCgB,KAsCP2G,EAtCO,KAmDjB2C,EAAgB,SAACnM,GACnBwJ,EAAW,CAAEtG,QAAQ,2BAAML,EAAQK,SAAf,kBAAyBlD,EAAMoD,OAAOnE,KAAOe,EAAMoD,OAAO3D,WAG5E2M,EAAa,SAACC,GAChB7C,EAAW,CAACtG,QAAQ,2BAAKL,EAAQK,SAAd,kBAAwBmJ,EAAKlN,KAAOkN,EAAKzN,QAwB1D0N,EAAgB,SAAC/I,GACnBiG,EAAW,CAAE,WAAcjG,IAC3B,IACI2B,EADUrB,OAAOC,KAAKP,GACR9E,KAAI,SAACE,GAAD,MAAU,CAAC,GAAM4E,EAAW5E,GAAKC,GAAI,KAAQ2E,EAAW5E,GAAKuF,eAAgB,UAAY,MAC/GsF,EAAW,CAAE,mBAAsBtE,KAkBjC9D,EAAa,SAACqG,GAAgB+B,EAAW,CAAE1C,QAASW,KACpDpG,EAAa,SAACqG,GAAe8B,EAAW,CAAEzC,QAASW,KAGnD3I,EAAY,uCAAG,sBAAAD,EAAA,sDACjBwN,EAAczJ,EAAQH,YACtBrB,EAAW,MACXmI,EAAW,CAAEtG,QAAS,KACtBsG,EAAW,CAAElL,UAAU,IAJN,2CAAH,qDAalBuD,EAAwB,QAAS,OA5DjB,SAACqB,GACbsG,EAAW,CAAE9F,KAAMR,EAAO,KAAP,OA2D0B5C,GACjDuB,EAAwB,WAAagB,EAAQa,KAAM,OAhF7B,SAACb,GACnB,IAAI0J,EAAS,CACTC,QAAS,KACTC,QAAS,KACT/I,KAAMb,EAAQa,KACdzE,KA5Ce,kBA8CnB4D,EAAQ4I,KAAKc,GACb/C,EAAW,CAAE,WAAc3G,MAwE0CvC,EAAYuC,EAAQa,KAAM,KAAM1B,GACzGH,EAAwB,iBAAmBgB,EAAQa,KAAM,MAAO4I,EAAehM,EAAYuC,EAAQa,MAGnG,IAAMmE,EAAgB3G,EAA2B,WAAa2B,EAAQa,KAAMb,EAAQK,QAAS5C,GAKvFoM,EAA6B,SAACC,EAAkBC,EAAiBb,GACnE,IAAIc,EAAc,GAClBF,EAAiBG,SAAQ,SAAAlO,GAAE,OAAIiO,EAAYpB,KAAKmB,EAAgBtI,MAAK,SAAAC,GAAE,OAAIA,EAAE,KAAW3F,KAAIsF,mBAC5F,IAAI6I,EAAWF,EAAYG,QAAO,SAAAzI,GAAE,OAAIA,KAEpCW,EADUrB,OAAOC,KAAKiI,GACRtN,KAAI,SAAAE,GAAG,MAAK,CAAC,KAAQoN,EAAmBpN,GAAKM,KAAM,GAAM8M,EAAmBpN,GAAKC,GACpE,WAAYmO,EAASE,SAASlB,EAAmBpN,GAAKM,UACrFuK,EAAW,CAAE,mBAAsBtE,KAKjCgI,EAFoB,CAAC,OAAQ,WAGbzO,KAAI,SAACE,GAAD,OAClB,kBAAC,EAAD,CAAOM,KAAMN,EACTgB,aAAcwM,EACd1M,MAAOoD,EAAQK,QAAQvE,GACvBiB,YAjJW,mBAiJGiD,EAAQvE,SAA8BuE,EAAQvE,SAASK,GAAO,GAC5Ea,MAAOb,EACPQ,KAAK,OACLR,IAAKA,EACLjC,UAAU,oBAKlByQ,EAAQC,MAAMC,KAAKD,MAAM,IAAItJ,QAAQrF,KAAI,SAAA8F,GAAE,OAAIA,EAAGC,cAClD8I,EAAU,CAAC,IAAK,KAAM,KAAM,MAE1BC,EAAUJ,EAAM1O,KAAI,SAAA8F,GAAE,MAAK,CAAE,KAAQA,EAAI,KAAQ,OAAQ,GAAMA,MAC/DiJ,EAAYF,EAAQ7O,KAAI,SAAA8F,GAAE,MAAK,CAAE,KAAQA,EAAI,KAAQ,SAAU,GAAMA,MACrEkJ,EAAaN,EAAM1O,KAAI,SAAA8F,GAAE,MAAK,CAAE,KAAQA,EAAI,KAAQ,UAAW,GAAMA,MACrEmJ,EAAeJ,EAAQ7O,KAAI,SAAA8F,GAAE,MAAK,CAAE,KAAQA,EAAI,KAAQ,YAAa,GAAMA,MAE3EoJ,EACF,yBAAKjR,UAAU,2BACX,yBAAKA,UAAU,qBACX,yBAAKA,UAAU,cAAf,gBACA,yBAAKA,UAAU,uBACX,kBAAC,EAAD,CAAa0N,UAAWvH,EAAQK,QAAQ0K,UAC5BvD,WAAYxH,EAAQmJ,aACpB1B,YAnGL,SAACY,EAAUT,EAAYc,GAC1C/B,EAAW,CAAEwC,aAAa,2BAAKnJ,EAAQmJ,cAAd,kBAA6Bd,EAA7B,2BAA6CrI,EAAQmJ,aAAad,IAAlE,kBAA8ET,EAAac,SAmG5FhB,QAhGP,SAACC,EAAYY,GAC9B5B,EAAW,CAAEtG,QAAQ,2BAAML,EAAQK,SAAf,kBAAyBsH,EAAaY,OAgGlCZ,WAAW,YACXC,WAAW,WACX/N,UAAU,kBAI9B,yBAAKA,UAAU,oBAAoBkC,GAAG,iBAClC,yBAAKlC,UAAU,cAAf,iBACA,kBAAC,EAAD,CAAUsC,eAAgBoN,EAClB7N,cAAc,OACdJ,YAAaoP,EACb5O,IAAI,OACJI,aAAc,aACdT,SAAUuE,EAAQK,QAAQ2K,KAC1BnR,UAAU,YAElB,kBAAC,EAAD,CAAUsC,eAAgBoN,EAClB7N,cAAc,SACdJ,YAAaqP,EACb7O,IAAI,SACJI,aAAc,aACdT,SAAUuE,EAAQK,QAAQ4K,OAC1BpR,UAAU,aAGtB,yBAAKA,UAAU,oBAAoBkC,GAAG,iBAClC,yBAAKlC,UAAU,cAAf,eACA,yBAAKA,UAAU,uBACX,kBAAC,EAAD,CAAUsC,eAAgBoN,EAClB7N,cAAc,OACdJ,YAAasP,EACb9O,IAAI,UACJI,aAAc,aACdT,SAAUuE,EAAQK,QAAQ6K,QAC1BrR,UAAU,YAElB,kBAAC,EAAD,CAAUsC,eAAgBoN,EAClB7N,cAAc,SACdJ,YAAauP,EACb/O,IAAI,YACJI,aAAc,aACdT,SAAUuE,EAAQK,QAAQ8K,UAC1BtR,UAAU,eAO9BqK,EAAUlE,EAAQkE,QAGhBkH,EADapK,OAAOC,KAAKjB,EAAQiJ,YAExBrN,KAAI,SAAAE,GACX,IAAIM,EAAO4D,EAAQiJ,WAAWnN,GAAKM,KACnC,MACI,CACIyG,MAAO,kBACPzG,KAAMA,EACN4G,OAAQ5G,EAAKkJ,QAAQ,OAAQ,KAAKC,kBAYlD,OACI,oCACI,yBAAK1L,UAAU,SACf,yBAAKA,UAAU,cACX,yBAAKA,UAAU,YACV+I,EAAeT,EAAa1I,EAAM0I,WACnC,0BAAMtI,UAAU,aAXvBmG,EAAQvE,SACJuE,EAAQvE,SAAoBmH,EACtB,GAFkB,sBAazB,yBAAK/I,UAAU,4BACX,kBAAC,EAAD,CAAckJ,YAAaqI,EACbjJ,WAAYA,EACZqB,kBAAmBA,EACnBN,qBAAsBA,EACtBN,aAAcA,EACdK,gBAAiBA,EACjBI,YA3KJ,SAACgI,GACvB,IAAIhJ,EAvFe,mBAuFTgJ,EAAOjP,KAA0BiP,EAAOjP,KAAO4D,EAAQiJ,WAAWxH,MAAK,SAAAC,GAAE,OAAIA,EAAGtF,OAASiP,EAAOjP,QAvFvF,mBAwFnBiG,GAA0BwH,EAA2BxH,EAAIiJ,eAAgBtL,EAAQH,WAAYG,EAAQkJ,oBACrG,IAAIqC,EAzFe,mBAyFLF,EAAOjP,KAA0B,GAAKiG,EAAIiJ,eACpDE,GAAUH,EAAOjP,KAA0B,IAC/CuK,EAAW,CACP,QAAW,CACP,GAAMtE,EAAItG,GACV,eAAkBwP,EAClB,UAAaC,KAGrB7E,EAAW,CAAE,SAAYtE,KAgKCiB,SAAS,qBAG1BtD,EAAQvE,UACL,yBAAK5B,UAAU,oBACX,yBAAKA,UAAU,sBACc,IAArBmG,EAAQvE,WACP,yBAAK5B,UAAU,eAAewQ,EAA9B,IAA2CS,IAGjD9K,EAAQvE,SACP,yBAAK5B,UAAU,cAAckC,GAAG,qBAC5B,gFACA,kBAAC,EAAD,CAAawL,UAAWvH,EAAQK,QAAQiL,eAC3B9D,WAAYxH,EAAQkJ,mBACpBzB,YAnNZ,SAACY,EAAUT,EAAYc,GAChD/B,EAAW,CAAEuC,mBAAmB,2BAAMlJ,EAAQkJ,oBAAf,kBAAoCb,EAApC,2BAAmDrI,EAAQkJ,mBAAmBb,IAA9E,kBAA0FT,EAAac,SAmNjGhB,QAhNhB,SAACC,EAAYY,GAClC5B,EAAW,CAAEtG,QAAQ,2BAAML,EAAQK,SAAf,kBAAyBsH,EAAaY,OAgNrBZ,WAAW,iBACXC,WAAW,cAG1B,yBAAK/N,UAAU,cAAckC,GAAG,uBAI9C,yBAAKlC,UAAU,eACVmG,EAAQvE,UACL,4BAAQa,KAAK,SACTzC,UAAU,8BACVQ,QAAS,WA9KV,IAACgI,EAAK0C,EAAL1C,EA+KmBrC,EAAQK,QA/KtB0E,EA+KgC,SAAAe,GAAK,OAAIA,GAA0B,IAAjBA,EAAMtB,QA9KtExD,OAAOC,KAAKoB,GAClBzG,KAAI,SAACE,GAAD,OAASiJ,EAAK1C,EAAIvG,YAAgBuG,EAAIvG,MA8KvBkE,EAAQK,QAAQjE,MAAQ6G,EAAgBjD,EAAQK,QAAQjE,MACxD4I,EAAczG,EAAYC,GAC1BqF,GAAY1E,IAGhB0G,SAAU7F,EAAQiE,SAChBjE,EAAQiE,SAAW,kBAAC,aAAD,CAAYA,QAASjE,EAAQiE,WAC/CjE,EAAQiE,SAAW,oDAGzBC,GAAW,IAAQA,EAAU,MAAS,qDACvCA,GAAW,MAAQ,oF,mDCxR5BuH,EA1Ba,SAAEhS,GAAY,IAE9BgE,EAAenE,IAAfmE,WAF6B,EAIPiG,oBAAS,GAJF,mBAIrBlF,GAJqB,aAKPkF,oBAAS,GALF,mBAKrBnF,GALqB,WAO/BmN,EAAWrN,EAA2B,iBAAkB5E,EAAMkS,WAAYlO,GAEhF,OACI,yBAAK5D,UAAU,WACX,yBAAKA,UAAU,UACX,4BAAQyC,KAAK,SACLzC,UAAU,mDACVQ,QAAO,sBAAE,sBAAA4B,EAAA,sDAAayP,EAASnN,EAAYC,GACrB/E,EAAMmS,eAAc,GACpBnS,EAAMoS,YAAW,GAF9B,4CAKb,gECyELC,EApFE,SAAErS,GAElB,IAAMsS,EAAoC,OAAzBtS,EAAMuS,SAASvR,OAAiBhB,EAAMuS,SAASvR,MAAMkR,WAChEM,EAAYtS,aAAaC,QAAQ,aAHV,EAKO8J,mBAASqI,GALhB,mBAKtBJ,EALsB,KAKVC,EALU,OAMWlI,oBAAS,GANpB,mBAMtBd,EANsB,KAMRK,EANQ,OAOqBS,oBAAS,GAP9B,mBAOtBF,EAPsB,KAOHN,EAPG,KASvBf,EAAc,4BAAQtI,UAAU,cAC/BkC,GAAG,OACH1B,QAAU,WAAO4I,GAAgB,GAC5BC,GAAqB,KAEtB,gCAELgJ,EAAS,CACdzG,EAAG,CACF5C,MAAO,OACPzG,KAAM,YACN4G,OAAQ,YACRG,UAAW,kBAAC,EAAD,CAAWhB,WAAYA,IAClCoB,QAAS,yBAAKxJ,IAAKoS,IAAYtS,UAAY,UAE5C6L,EAAG,CACF7C,MAAO,OACPzG,KAAM,UACN4G,OAAQ,UACRG,UAAW,kBAAC,EAAD,CAAShB,WAAYA,IAChCoB,QAAS,yBAAKxJ,IAAKqS,IAAavS,UAAY,UAE7CwS,EAAG,CACFxJ,MAAO,OACPzG,KAAM,gBACN4G,OAAQ,iBACRG,UAAW,kBAAC,EAAD,CAAehB,WAAYA,EAAYG,WAAY7I,EAAM6I,aACpEiB,QAAS,yBAAKxJ,IAAKoS,IAAYtS,UAAY,UAE5CyS,EAAG,CACFzJ,MAAO,OACPzG,KAAM,gBACN4G,OAAQ,gBACRG,UAAW,kBAAC,EAAD,CAAWhB,WAAYA,IAClCoB,QAAS,yBAAKxJ,IAAKwS,IAAc1S,UAAY,WAGxC2S,EAAW,CACjB/G,EAAG,CACF5C,MAAO,OACPzG,KAAM,gBACN4G,OAAQ,iBACRG,UAAW,kBAAC,EAAD,CAAehB,WAAYA,EAAYG,WAAY7I,EAAM6I,aACpEiB,QAAS,yBAAKxJ,IAAKoS,IAAYtS,UAAY,UAE5C6L,EAAG,CACF7C,MAAO,OACPzG,KAAM,gBACN4G,OAAQ,gBACRG,UAAW,kBAAC,EAAD,CAAWhB,WAAYA,IAClCoB,QAAS,yBAAKxJ,IAAKwS,IAAc1S,UAAY,WAI3CwI,EAAoB,SAAd4J,EAAuBC,EAASM,EAE1C,OAEC,yBAAK3S,UAAU,YACZ8R,GAA6B,cAAfA,EAA8B,kBAAC,EAAD,CAAqBA,WAAYA,EAC5DC,cAAeA,EACfC,WAAYpS,EAAMoS,aACrC,kBAAC,EAAD,CAAc9I,YAAaV,EACpBF,WAAYA,EACdqB,kBAAmBA,EACnBN,qBAAsBA,EACtBN,aAAcA,EACdK,gBAAiBA,EACjBK,SAAU,sBC9EHmJ,EATD,kBACb,yBAAK5S,UAAU,mBACZ,yBAAKA,UAAU,mBAAf,0O,MCmFW6S,MAjFf,SAAwBjT,GAAQ,MAQLe,sBAJ1B,SAAqBC,EAAOC,GAC3B,kCAAWD,GAAUC,KAHL,IAFc,mBAQxBD,EARwB,KAQjBG,EARiB,KAUzB+R,EAAuB,SAAExP,GAAF,OAC3BvC,EAAS,eAAEuC,EAAMoD,OAAOnE,KAAOe,EAAMoD,OAAO3D,SAEtCa,EAAenE,IAAfmE,WAERuB,EAAwB,QAAS,MAAOpE,EAAU6C,GAGlD,IAAMmP,EAAc,CAAC,QAAS,WAAY,eACpCC,EAAgB,CAAC,aAAc,YAAa,gBAAiB,WAnBpC,EAuBiBnJ,mBAASkJ,GAvB1B,mBAuBxBE,EAvBwB,KAuBNC,EAvBM,OAwBDrJ,oBAAS,GAxBR,mBAwBxBO,EAxBwB,KAwBf1F,EAxBe,OAyBDmF,mBAAS,MAzBR,mBAyBxBQ,EAzBwB,KAyBf1F,EAzBe,KA4BzBwO,EAAkBF,EAAiBlR,KAAI,SAACE,GAAD,MACnC,gBAARA,EACA,yBAAKjC,UAAU,iBACd,+BAAQiC,GACR,2BAAOM,KAAMN,EACVQ,KAAK,OACLM,MAAOnC,EAAMqB,GACfe,SAAU8P,KAGZ,4BAAQ9S,UAAU,qCACjBQ,QAAS,kBAAMZ,EAAMwT,QAAQrE,KAAK,qBACnC,oDAKIsE,EAAiB7O,EAA2B,QAAS5D,EAAOgD,GAElE,OACC,yBAAK5D,UAAU,iBACd,yBAAKA,UAAU,gBACd,yBAAKA,UAAU,OACd,yBAAKA,UAAU,YACd,yBAAKA,UAAU,oBACd,4CACA,6BACC,4BAAQA,UAAWiT,EAAiB,KAAOF,EAAY,GAAK,4BAA8B,0BAClFvS,QAAS,kBAAM0S,EAAoBH,KAD3C,WAEA,4BAAQ/S,UAAWiT,EAAiB,KAAOD,EAAc,GAAK,4BAA8B,0BAC1FxS,QAAS,kBAAM0S,EAAoBF,KADrC,gBAIF,yBAAKhT,UAAU,iBACbmT,MAML,4BAAQ1Q,KAAK,SACAzC,UAAU,iBACrBQ,QAAU,kBAAM6S,EAAe3O,EAAYC,IAC3CqH,SAAW5B,IAEHA,GAAW,mDAEhBC,GAAW,IAAQA,EAAU,MAAS,kEACpCA,GAAW,MAAQ,kF,+BCwCdiJ,MAlHf,SAAqB1T,GAAS,IAAD,EAEOiK,oBAAS,GAFhB,mBAElB0J,EAFkB,KAERC,EAFQ,KAIpB3T,EAAkBJ,IAAlBI,cAJoB,EAeQc,sBAJpC,SAAsBC,EAAOC,GAC5B,OAAO,2BAAKD,GAAUC,KANL,CACjB4S,SAAU,GACVC,SAAU,KARiB,mBAerBC,EAfqB,KAeTC,EAfS,OAgBE/J,oBAAS,GAhBX,mBAgBrBQ,EAhBqB,KAgBZ1F,EAhBY,KAoBxBkP,EAAUC,OAAO3B,SAAS4B,KAAKhM,MAAM,WACrC+J,IAAa+B,GAAUA,EAAQ,GAAGpI,QAAQ,YAAa,IAAIA,QAAQ,QAAS,IAE1EuI,EAAmB,SAAE1Q,GAAF,OACxBsQ,EAAc,eAAEtQ,EAAMoD,OAAOnE,KAAOe,EAAMoD,OAAO3D,SAK5CkR,EAAcjQ,sBAAW,sBAAC,sBAAA5B,EAAA,sDAC/B8B,MAAMH,kFAAmD,CACrDI,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BQ,KAAMC,KAAKC,UAAU6O,KAEtBtP,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAE,GAVW,IAAC2P,EAAIC,EAAJD,EAUa/M,OAAOC,KAAK7C,GAVrB4P,EAU4B,CAAC,QAAS,YAAY,eAVlCtP,KAAKC,UAAUoP,KAAQrP,KAAKC,UAAUqP,IAWzEtU,EAAc0E,EAAK6P,OACnBtU,aAAauU,QAAQ,QAAS9P,EAAK6P,OACnCtU,aAAauU,QAAQ,YAAa9P,EAAK6N,WACvCtS,aAAauU,QAAQ,cAAe9P,EAAK+P,aACzCd,GAAY,KAEZlF,QAAQC,IAAIpH,OAAOC,KAAK7C,IACxBI,EAAWJ,OAfe,2CAkB7B,CAACoP,EAAY9T,IAGhB,OAAI0T,EAAoB,kBAAC,IAAD,CAAUtT,GAAI,CAACsU,SAAU,YAAa3T,MAAO,CAAEkR,WAAYA,MAUlF,oCACA,yBAAK9R,UAAU,mBACT,yBAAKE,IAAKC,IAAMH,UAAY,SAC/B,yBAAKA,UAAU,gBAChB,kBAAC,EAAD,CAAOuC,KAAK,WACXE,KAAK,OACLM,MAAO4Q,EAAWF,SAClBxQ,aAAc+Q,EACd9Q,YAAY,WACZlD,UAAU,cACV0C,WAAW,WACXW,SAAS,IAEV,kBAAC,EAAD,CAAOd,KAAK,WACXE,KAAK,WACLM,MAAO4Q,EAAWD,SAClBzQ,aAAc+Q,EACd9Q,YAAY,WACZlD,UAAU,cACV0C,WAAW,WACXW,SAAS,KAGV,yBAAKrD,UAAU,0BACd,4BAAQyC,KAAK,SACZzC,UAAU,8BACVkC,GAAG,eACH1B,QAAS,WAAOyT,EAAYN,GACxB7B,GAAclS,EAAMoS,YAAW,IAEnC5O,WAtCW,SAACoR,GACG,UAAVA,EAAEvS,MACVsB,SAASC,eAAe,gBAAgBC,QACxC6K,QAAQC,IAAI,YAoCT,wCAED,4BACCvO,UAAU,8BACVkC,GAAG,eACH1B,QAAS,kBAAMZ,EAAMwT,QAAQrE,KAAK,aAClC,0CAED,4BACC/O,UAAU,uBACVQ,QAAS,kBAAMZ,EAAMwT,QAAQrE,KAAK,qBAClC,oDAKJ,0BAAM/O,UAAU,mBAAmB8R,GAAc,sDACjC,IAAZzH,IAAsB,0BAAMrK,UAAU,iBAAgB,qGAC1C,IAAZqK,IAAsB,0BAAMrK,UAAU,iBAAkBmH,OAAOC,KAAKiD,GAAStI,KAAI,SAAAE,GAAQ,OAAO,6BAAMA,EAAM,IAAMoI,EAAQpI,UC9FjHwS,EAnBU,SAAE7U,GAEvB,OACA,qCACIA,EAAM8U,0BACN,4BAAQjS,KAAK,SACXzC,UAAU,iBACVQ,QAAS,WACOZ,EAAM+U,UAAU/U,EAAM8E,WAAY9E,EAAM+E,WAAY/E,EAAMgV,YAC1DhV,EAAMiV,6BAA6BjV,EAAM8U,0BACzC9U,EAAMkV,eAAc,KAEpC,8BAAOlV,EAAM+I,eCmERoM,MAhFf,SAAyBnV,GAAS,IAAD,EACLiK,mBAAS,MADJ,mBACxBmL,EADwB,KACjBC,EADiB,KAEzBC,EAAYC,mBAEVvR,EAAenE,IAAfmE,WAJuB,EAOKiG,oBAAS,GAPd,mBAOZuL,GAPY,aAQDvL,oBAAS,GARR,mBAQflF,GARe,WASzB0Q,EAAgBpQ,EAA2B,eAAgBrB,GATlC,EAaSiG,oBAAS,GAblB,mBAaxByL,EAbwB,KAaVC,EAbU,OAcH1L,oBAAS,GAdN,mBAchB2L,GAdgB,WAgB/B/P,qBAAU,WACN,IAAI6P,EAAc,CACd,IAAMG,EAAWlS,SAASmS,cAAc,UACxCD,EAASvV,IAAM,wIAA0IN,EAAM+V,WAC/JF,EAAShT,KAAO,kBAChBgT,EAASG,aAAa,iBAAkB,cACxCH,EAASI,OAAT,sBAAkB,sBAAAzT,EAAA,sDACQoT,GAAU,GACVM,IAFR,2CAIlBvS,SAASwS,qBAAqB,QAAQ,GAAGC,YAAYP,GACrDF,GAAgB,MAErB,IAEH,IAAMO,EAAe,kBACnBhC,OAAOmC,WACJC,QAAQ,CACPC,YAAa,SAACC,EAAMC,GAChB,OAAOA,EAAQ/P,MAAMgQ,OAAO,CAC1BC,eAAgB,CAChB,CACEC,YAAa5W,EAAM4N,aAAagJ,YAChC5L,OAAQ,CACN6L,cAAe,MACf1T,MAAOnD,EAAM4N,aAAa9F,YAMpCgP,UAAU,WAAD,4BAAE,WAAON,EAAMC,GAAb,iBAAAjU,EAAA,sEACgBiU,EAAQ/P,MAAMqQ,UAD9B,OACLC,EADK,OAELC,EAAc,CAChBjM,OAAQgM,EAAaL,eAAe,GAAG3L,OAA/B,MACRkM,mBAAoBF,EAAaL,eAAe,GAAGQ,MAA/B,YACpBC,gBAAiBJ,EAAa1U,GAC9B+U,gBAAiBL,EAAaM,MAAMC,SACpCC,kBAAmBhB,EAAKiB,UACxBC,gBAAiB,SACjBhR,MAAO1G,EAAM2X,QACbxS,OAAQ,YACRiC,KAAMpH,EAAMoH,KAAK9E,IAEnBmT,EAAcD,EAAezQ,EAAYkS,GACzCjX,EAAM4X,WAAW5X,EAAM6X,SACvB7X,EAAM8X,iBAAgB,GACtB9X,EAAMkV,eAAc,GACpBlV,EAAM+X,eAAe,KAjBZ,2CAAF,qDAAC,GAmBVC,QAAS,SAAAC,GACL5C,EAAS4C,MAEZC,OAAO5C,EAAU6C,UAGxB,OACE,yBAAK/X,UAAU,4BACZgV,GAAS,0DAAgCA,EAAMgD,SAChD,yBAAKC,IAAK/C,MCpDDgD,EAxBG,SAAEtY,GAAY,IAAD,EAEGiK,mBAAS,IAFZ,mBAEpB+G,EAFoB,KAEXuH,EAFW,OAGGtO,mBAAS,GAHZ,mBAGpBuO,EAHoB,KAGXC,EAHW,OAIKxO,mBAASjK,EAAM0Y,YAJpB,mBAIpBC,EAJoB,KAIVC,EAJU,KAgB3B,OAVA/S,qBAAU,WACF8S,IACJH,EAAU,GAAKK,YAAW,kBAAMJ,EAAWD,EAAU,KAAI,KAC7C,IAAZA,GAA6B,IAAZxH,GAAiB4H,GAAY,IAAU5Y,EAAM4X,WAAW5X,EAAM6X,SACnE,IAAZW,GAAiBK,YAAW,WAAON,EAAWvH,EAAU,GACrByH,EAAW,MACT,QAEtC,CAACD,IAGA,6BACMG,EACW,+CAAqB3H,EAArB,IAA+BwH,EAAU,GAAV,WAAmBA,GAAYA,GAD9D,mHCkGVM,EA9GK,SAAE9Y,GAAY,IAEtBgE,EAAenE,IAAfmE,WAcR,IAAM+U,EAAe/Y,EAAM+Y,aACrBjB,EAAkB9X,EAAM8X,gBAjBD,EAmBC7N,oBAAS,GAnBV,mBAmBtB0N,EAnBsB,KAmBb3C,EAnBa,OAoBHjU,sBAT1B,SAAsBC,EAAOC,GACzB,OAAO,2BAAKD,GAAUC,KARP,CACf4B,KAAM,QACN2H,SAAS,EACTC,QAAS,KACTF,OAAQ,WARiB,mBAoBtB7D,EApBsB,KAoBfC,EApBe,KAwBvB8D,EAAU/D,EAAM+D,QAgClBuO,EAAW/T,KAAKsH,MAAMtH,KAAKC,UAAUlF,EAAMiZ,KAAKF,KACpDC,EAASjR,OAASmR,SAASH,EAAaI,MAAM,KAAK,IACnD,IAAIxN,EAAc/G,EAA2B,mBAAoB,CAAC8B,EAAM7D,KAAMmW,GAAWhV,GACrFoD,EAAOpH,EAAMiZ,KAAKF,GAAc3R,KAChCW,EAAS/H,EAAMiZ,KAAKF,GAAchR,OAClCD,EAAQ,CAAC,MAAS9H,EAAMiZ,KAAKF,GAAcjR,OA7DlB,EA+DKmC,oBAAS,GA/Dd,mBA+DxB8L,EA/DwB,KA+DZqD,EA/DY,KAgEzBpU,EAAOC,KAAKC,UAAU,CAACkC,KAAMA,EAAK9E,KACtCoM,QAAQC,IAAI3J,GAEZO,EAAwB,iBAAkB,OAAQ6T,EAAepV,EAAY+U,EAAc/T,GAE3F,IA3CuB6S,EA2CjBwB,EAAc,kBAAC,EAAD,CAAgBzL,aAAc9F,EACdV,KAAMA,EACN2O,WAAYA,EACZ4B,QAASA,EACTE,QAASkB,EACTnB,WAAY5X,EAAM4X,WAClBE,gBAAiB9X,EAAM8X,gBACvB5C,cAAelV,EAAMkV,cACrB6C,eAAgB/X,EAAM+X,iBAEpDuB,EACE,yBAAKlZ,UAAU,YACX,0BAAMA,UAAU,oBAAoBgH,EAAKzE,KAAO,OAASoF,IAvD9C8P,EAwDIkB,EAvDTxR,OAAOC,KAAKxH,EAAMiZ,KAAKpB,GAASvR,WAElCnE,KAAI,SAACE,GACT,IAAI2I,EAAShL,EAAMiZ,KAAKpB,GAASvR,UAAUjE,GACvCkX,EAAWvZ,EAAMiZ,KAAKpB,GAAS5Q,WAAWe,MAAK,SAAAC,GAAE,OAAI5F,IAAQ4F,EAAGL,kBAChEE,EAAQyR,EAASzR,MAAQkD,EACjC,OACI,yBAAK5K,UAAU,qBACX,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,mBACX,0BAAMA,UAAU,kBAAmBiC,GACnC,0BAAMjC,UAAU,gBAAgB4K,EAAS,IAAMuO,EAAS1R,aACxD,0BAAMzH,UAAU,gBAAgB,IAAM0H,KAG9C,4BAAQ1H,UAAU,gBACVQ,QAAS,WAAOZ,EAAMwZ,eAAe3B,EAASxV,GAC9BsE,EAAS,CAAC4D,OAAQ,gBACWhI,IAA7BvC,EAAMiZ,KAAKF,IAA+BjB,EAAgBvQ,OAAOC,KAAKxH,EAAMiZ,MAAM,MAGtG,yCAmCR,6CAAmBnR,EAAMA,OACzB,kBAAC,EAAD,CAAkBiB,WAAW,uBACXgM,UAAWpJ,EACX7G,WAhEX,SAACqG,GAAgBxE,EAAS,CAAE6D,QAASW,KAiE1BpG,WAhEX,SAACqG,GAAezE,EAAS,CAAE8D,QAASW,KAiEzB4J,WAAYA,EACZE,cAAelV,EAAMkV,cACrByC,QAASA,EACT1C,4BAA6BjV,EAAMiV,4BACnCH,yBAA0B9U,EAAM8U,4BAK9D,OACI,yBAAK1U,UAAU,sBACVkZ,EACAtZ,EAAM0Y,YAAc,kBAAC,EAAD,CAAWA,WAAY1Y,EAAM0Y,WAClBd,WAAY5X,EAAM4X,WAClBC,QAAS7X,EAAM6X,UAE9C7X,EAAM8U,0BAA4B6C,GAAW0B,KAChD5O,GAAW,MAAQ,kFCrDdgP,EAvDF,SAAEzZ,GAEYH,IAAfmE,WAFe,IAIjB+U,EAAe/Y,EAAM+Y,aACrBjB,EAAkB9X,EAAM8X,gBALR,EAM0C7N,oBAAS,GANnD,mBAMf6K,EANe,KAMWG,EANX,OAOchL,oBAAS,GAPvB,mBAOfyO,EAPe,KAOHxD,EAPG,OAQQjL,oBAAS,GARjB,mBAQfQ,EARe,KAQN1F,EARM,KAahB2U,EAFWnS,OAAOC,KAAKxH,EAAMiZ,MAGtB9W,KAAI,SAAAE,GACT,IAAIsX,EAAetX,IAAQ0W,EAAgB,2BAA6B,kBACxE,OACA,6BACI,4BAAQ3Y,UAAWuZ,EACX/Y,QAAS,WAAQkX,EAAgBzV,GAChB4S,GAA4B,GAC5BC,GAAc,GACdnQ,GAAW,KAG5B,8BAAO/E,EAAMiZ,KAAK5W,GAAK+E,KAAKzE,KAAM,OAAS3C,EAAMiZ,KAAK5W,GAAK0F,aAM/E,OACI,yBAAK3H,UAAU,kBACX,yBAAKA,UAAU,gBAAgBkC,GAAG,iBAC9B,0BAAMlC,UAAU,mBAAhB,QACA,yBAAKA,UAAU,YAAYsZ,GACX,KAAf1Z,EAAMiZ,OAAgBxO,GAAW,uDAC7BA,GAAW,IAAQA,EAAU,MAAS,wGAC7CA,GAAW,MAAQ,gFAChBsO,GAAgB,kBAAC,EAAD,CAAaA,aAAcA,EACdE,KAAMjZ,EAAMiZ,KACZO,eAAgBxZ,EAAMwZ,eACtB5B,WAAY5X,EAAM4X,WAClBE,gBAAiBA,EACjBhD,yBAA0BA,EAC1BG,4BAA6BA,EAC7ByD,WAAYA,EACZxD,cAAeA,EACf6C,eAAgBhT,OCc/C6U,GA1DO,SAAE5Z,GAAY,IAAD,EAETiK,mBAAS,IAFA,mBAE1BgP,EAF0B,KAEpBY,EAFoB,OAGO5P,oBAAS,GAHhB,mBAG1B8O,EAH0B,KAGZjB,EAHY,KAK3BjP,EAAa,SAAEnC,EAAOO,EAAYG,EAAMW,EAAQD,GAClD+R,EAAQ,2BAAIZ,GAAL,kBAAYvS,EAAMF,iBAAmB,CAAC,UAAaE,EAAMJ,UACpB,WAAcW,EACd,KAAQG,EACR,OAAUW,EACV,OAAU,aACV,MAASD,OAMnD0R,EAAiB,SAACnX,EAAKuI,UAAsBqO,EAAK5W,GAAKiE,UAAUsE,GACiB,IAA5CrD,OAAOC,KAAKyR,EAAK5W,GAAKiE,WAAWyE,QAAgB+M,GAAgB,GACrB,IAA5CvQ,OAAOC,KAAKyR,EAAK5W,GAAKiE,WAAWyE,eAAuBkO,EAAK5W,GAChC,IAA7BkF,OAAOC,KAAKyR,GAAMlO,QAAgB+M,GAAgB,GACrB,IAA7BvQ,OAAOC,KAAKyR,GAAMlO,QAAgB8O,EAAQ,KAGhFjC,EAAa,SAACvV,GAAUyV,GAAgB,UACTmB,EAAK5W,GACiB,IAA7BkF,OAAOC,KAAKyR,GAAMlO,QAAgB8O,EAAQ,KAIlEC,EAAWvS,OAAOC,KAAKyR,GACvBtY,EAAuB,KAATsY,GAAea,EAAS3X,KAAI,SAAAE,GAAQ,OAAOkF,OAAOC,KAAKyR,EAAK5W,GAAKiE,WAAWyE,UAASgP,QAF7F,SAACvX,EAAGwX,GAAJ,OAAUxX,EAAIwX,KAItB5H,EAAapS,EAAMoS,WAEvB,OACE,yBAAKhS,UAAU,kBACf,kBAAC,EAAD,CAAQO,YAAaA,EAAaH,QAASR,EAAMQ,UAC/C,8BACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOyZ,KAAI,UAAKja,EAAMmI,MAAM8R,KAAjB,SAA8B/B,OAAQ,SAAClY,GAAD,OAAW,kBAAC,EAAD,iBAAcA,EAAd,CAAqB6I,WAAYA,EAAYuJ,WAAYA,QACrH,kBAAC,IAAD,CAAO6H,KAAI,UAAKja,EAAMmI,MAAM8R,KAAjB,UAA+BvQ,UAAYsJ,IACtD,kBAAC,IAAD,CAAOiH,KAAI,UAAKja,EAAMmI,MAAM8R,KAAjB,aAAkCvQ,UAAYuJ,IACzD,kBAAC,IAAD,CAAOgH,KAAI,UAAKja,EAAMmI,MAAM8R,KAAjB,SAA8B/B,OAAQ,SAAClY,GAAD,OAAW,kBAAC,EAAD,iBAAUA,EAAV,CAAiBiZ,KAAMA,EACZO,eAAgBA,EAChB5B,WAAYA,EACZmB,aAAcA,EACdjB,gBAAiBA,QAGxF,kBAAC,IAAD,CAAOmC,KAAI,UAAKja,EAAMmI,MAAM8R,KAAjB,UAA+B/B,OAAQ,SAAElY,GAAF,OAAa,kBAAC,EAAD,iBAAeA,EAAf,CAAsBoS,WAAYpS,EAAMoS,iBACvG,kBAAC,IAAD,CAAU/R,GAAE,UAAKL,EAAMmI,MAAMjE,W,SC7CxBgW,OAXf,YAA0D,IAAvBC,EAAsB,EAAjCzQ,UAAyB0Q,EAAQ,8BAC/CpW,EAAenE,IAAfmE,WAER,OACE,kBAAC,IAAD,iBAAWoW,EAAX,CAAiBlC,OAAQ,SAAElY,GAAF,OAAagE,EAAe,kBAACmW,EAAD,iBAAena,EAAWoa,IAC1B,kBAAC,IAAD,CAAU/Z,GAAG,gBCkCvDga,GA1CQ,SAAEra,GAAY,IAAD,EAEYiK,oBAAS,GAFrB,mBAEzBqQ,EAFyB,KAETC,EAFS,OAGJtQ,oBAAS,GAHL,mBAGzBuQ,EAHyB,KAGjB5E,EAHiB,KAMhC/P,qBAAU,WACN,IAAIyU,EAAe,CACf,IAAMG,EAAiB9W,SAASmS,cAAc,UAC9C2E,EAAenY,GAAK,aACpBmY,EAAena,IAAO,2DACtBma,EAAe5X,KAAO,kBACtB4X,EAAexE,OAAS,WAAQL,GAAU,GACV2E,GAAkB,IAElD5W,SAASwS,qBAAqB,QAAQ,GAAGC,YAAYqE,MAE1D,IAGmBD,GAAUF,GAC5BpG,OAAOwG,OAAOC,IAAK,CAAC,UAAU,SAAUC,GACpCA,EAAM1C,OAAQ,CACd,MAAQ,mFACR,QAAU,UACV,OAAS,CAAC,UACV,YAAc,aACd,aAAe,OACf,OAAS,QACT,WAAa,MACb,YAAc,OACd,WAAa,KACb,SAAW,OACX,UA7BgB/T,iFAkCxB,OACI,0BAAM7B,GAAG,gBC2FFuY,OA5Hf,SAAkB7a,GAESH,IAAfmE,WAFc,MAmBCjD,sBAJ1B,SAAuBC,EAAOC,GAC7B,OAAO,2BAAKD,GAAUC,KAZJ,CACZ,WAAa,EACb,aAAe,EACf,KAAQ,GACR,gBAAmB,OACnB,UAAY,EACZ,cAAgB,EAChB,WAAc,SACd,WAAc,WAZI,mBAmBlBD,EAnBkB,KAmBXG,EAnBW,KAqBnBiT,EAAmB,SAAE1Q,GAAF,OAClBvC,EAAS,eAAEuC,EAAMoD,OAAOnE,KAAOe,EAAMoD,OAAO3D,SAtB1B,EAwBkB8G,mBAAS,CAAC,QAAS,WAAY,WAAY,aAAc,YAAa,gBAAiB,YAxBzG,mBAwBf6Q,EAxBe,aAyBQ7Q,oBAAS,IAzBjB,mBAyBfQ,EAzBe,KAyBN1F,EAzBM,OA0BMkF,oBAAS,GA1Bf,mBA0Bf9E,EA1Be,KA0BP4V,EA1BO,OA2BQ9Q,oBAAS,GA3BjB,mBA2BfO,EA3Be,KA2BN1F,EA3BM,KAuChBkW,EAAkB,SAAC5P,GACrB,IAAM6P,EAAa7P,EAASjG,OACtBqR,EAAOpL,EAASzG,OACtB,OAAOuW,QAAQC,IAAI,CAACF,EAAYzE,IAAO/R,MAAK,SAAAC,GAAG,MAAK,CACRuW,WAAYvW,EAAI,GAChB8R,KAAM9R,EAAI,QAIpD0W,EAAehX,sBAAW,sBAAC,sBAAA5B,EAAA,sDAC7BsC,GAAW,GACjBR,MAAMH,8EAA+C,CAClDI,OAAQ,OACRC,QAAS,CAAE,eAAgB,oBAC3BQ,KAAMC,KAAKC,UAAUlE,KAEjByD,KAAKuW,GACLvW,MAAK,SAAAC,GAAQ,IACHuW,EAAoBvW,EAApBuW,WAAYzE,EAAQ9R,EAAR8R,KACnBuE,EAAUE,GACVlW,EAAWyR,MACf1R,GAAW,GAZkB,2CAajC,CAAC9D,IAEKqa,EACF,yBAAKjb,UAAU,iBACX,0BAAMA,UAAU,mBAAhB,8EACA,kBAAC,GAAD,OAIZ,OAEI,yBAAKA,UAAU,oBACZ,yBAAKE,IAAKC,IAAMH,UAAY,WAC5BY,EAAMwR,UAAYxR,EAAM0T,gBAAkB1T,EAAMwR,WAAarN,GAAUA,EAAS,MAC/E,yBAAK/E,UAAU,gBACX,0BAAMA,UAAU,mBAAhB,gBACA,yBAAKA,UAAU,2BACX,4BAAQyC,KAAK,SACLzC,UAAU,+BACVQ,QAAS,kBAAMO,EAAS,CAAC,WAAa,GAC1B2Z,EAAa3L,KAAK,WAElC,yCAEJ,4BAAQtM,KAAK,SACLzC,UAAU,+BACVQ,QAAS,kBAAMO,EAAS,CAAC,aAAe,MAC5C,gDAMZH,EAAMwR,UAAYxR,EAAM0T,gBAAkB1T,EAAMwR,WAAarN,GAAUA,EAAS,MAChF,yBAAK/E,UAAU,UACX,yBAAKA,UAAU,iBAnEF,SAAC0a,GAAD,OAAkBA,EAAa3Y,KAAI,SAACE,GAAD,OACpD,kBAAC,EAAD,CAAOM,KAAMN,EACNQ,KAAc,aAARR,EAAqBA,EAAM,OACjCc,MAAOnC,EAAMqB,IACbgB,aAAc+Q,EACd9Q,YAAajB,EACbjC,UAAU,mBA8DRkb,CAAaR,IAElB,yBAAK1a,UAAU,2BACX,4BAAQyC,KAAK,SACLzC,UAAU,iBACVQ,QAAS,kBAAMwa,EAAapa,KAChC,iDAEJ,4BAAQ6B,KAAK,SACLzC,UAAU,iBACVQ,QAAS,kBAAMZ,EAAMwT,QAAQrE,KAAK,YACtC,oDAMD,MAAXhK,IAAmB,gGACP,MAAXA,IAAgC,IAAZsF,IAAuB,2DAC/B,IAAZA,GAAkC,MAAXtF,IAAoB,8BAAQoC,OAAOC,KAAKiD,GAAStI,KAAI,SAAAE,GAAQ,OAAO,6BAAMA,EAAM,KAAOoI,EAAQpI,QAC1HmI,GAAW,kBAAC,aAAD,CAAYA,QAASA,IAChCxJ,EAAMwR,WAAarN,GAAUA,EAAS,KAAOkW,ICtCnCE,GAnFO,SAAEvb,GAEvB,IAAIwb,EAActH,OAAO3B,SAAS4B,KAAKhM,MAAM,mBACzCqM,EAAQgH,EAAcA,EAAY,GAAI,KAHR,EAaMza,sBANrB,SAACC,EAAOC,GAC1B,OAAO,2BAAID,GAAUC,KAFH,CAAC6S,SAAU,GAAI2H,gBAAiB,KANjB,mBAa7BC,EAb6B,KAadC,EAbc,OAeN1R,oBAAS,GAfH,mBAepBnF,GAfoB,aAgBNmF,oBAAS,GAhBH,mBAgB7BQ,EAhB6B,KAgBpB1F,EAhBoB,KA8BzB6W,EAAuB,SAAElY,GAAF,OACzBiY,EAAiB,eAAEjY,EAAMoD,OAAOnE,KAAOe,EAAMoD,OAAO3D,SAEvD0Y,EAAuBvW,EAAiC,0BAE5D,OACC,yBAAKlF,UAAU,4BACT,yBAAKE,IAAKC,IAAMH,UAAY,SACjC,yBAAKA,UAAU,kCACd,kBAAC,EAAD,CACCuC,KAAK,WACLE,KAAK,WACLM,MAAOuY,EAAc5H,SACrBzQ,aAAcuY,EACdxb,UAAU,cACVkD,YAAY,eACZG,SAAS,IAEV,kBAAC,EAAD,CACCd,KAAK,kBACLE,KAAK,WACLM,MAAOuY,EAAcD,gBACrBpY,aAAcuY,EACdxb,UAAU,cACVkD,YAAY,mBACZG,SAAS,KAGX,yBAAKrD,UAAU,mCACd,4BAAQyC,KAAK,SACZzC,UAAU,8BACVkC,GAAG,eACH1B,QAAS,WAAOib,EAAqB/W,EAAYC,EA3ChC,WAEpB,GAAI2W,EAAc5H,WAAa4H,EAAcD,iBAAmBjH,EAK1D,MAJgB,CACd,MAASA,EACT,SAAYkH,EAAc5H,UAsC8BgI,MAC7D,iDAEW,4BAAQjZ,KAAK,SACLzC,UAAU,8BACVQ,QAAS,kBAAMZ,EAAMwT,QAAQrE,KAAK,YACtC,iDAGjB,gCACgB,IAAZ1E,IAAkC,OAAZA,GAAoB,0BAAMrK,UAAU,iBAAgB,qGAC9D,IAAZqK,IAAkC,OAAZA,GAAoB,0BAAMrK,UAAU,iBAAgB,6BAAMqK,MACpE,OAAZA,IAAqB,0BAAMrK,UAAU,iBAAgB,kEC1B7C2b,GAhDQ,SAAE/b,GAAY,IAAD,EAERiK,mBAAS,IAFD,mBAE3B+R,EAF2B,KAEpBC,EAFoB,OAIPhS,oBAAS,GAJF,mBAIrBnF,GAJqB,aAKPmF,oBAAS,GALF,mBAK9BQ,EAL8B,KAKrB1F,EALqB,KAa/B8W,EAAuBvW,EAAiC,kBAE5D,OACO,yBAAKlF,UAAU,4BACf,yBAAKE,IAAKC,IAAMH,UAAY,SACxB,kBAAC,EAAD,CACIuC,KAAK,QACLE,KAAK,QACLM,MAAO6Y,EACP3Y,aAAc,SAACK,GAAD,OAAWuY,EAASvY,EAAMoD,OAAO3D,QAC/C/C,UAAU,cACVkD,YAAY,mBACZG,SAAS,IAEb,yBAAKrD,UAAU,mCACX,4BAAQyC,KAAK,SACTzC,UAAU,8BACVkC,GAAG,eACH1B,QAAS,WAAOib,EAAqB/W,EAAYC,EAtB9C,CAAE,MAASiX,MAuBd,yCAEJ,4BAAQnZ,KAAK,SACLzC,UAAU,8BACVQ,QAAS,kBAAMZ,EAAMwT,QAAQrE,KAAK,YACtC,iDAGR,gCACgB,IAAZ1E,IAAkC,OAAZA,GAAoB,0BAAMrK,UAAU,iBAAgB,qGACvE,IAAZqK,IAAkC,OAAZA,GAAoB,0BAAMrK,UAAU,iBAAgB,6BAAMqK,MAC3D,OAAZA,IAAqB,0BAAMrK,UAAU,iBAAgB,sFCTtD8b,OA5Bf,WAAgB,IAAD,EAEuBjS,qBAFvB,mBAENjG,EAFM,KAEM/D,EAFN,OAQegK,oBAAS,GARxB,mBAQRzJ,EARQ,KAQC4R,EARD,KAUb,OACE,yBAAKhS,UAAU,OACf,kBAACT,EAAYwc,SAAb,CAAsBhZ,MAAO,CAAEa,aAAY/D,cAR3B,SAAEuW,GAClBvW,EAAcuW,MAQZ,kBAAC,IAAD,KACC,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAOyD,KAAK,SAAS/B,OAAQ,SAAElY,GAAF,OAAa,kBAAC,EAAD,iBAAeA,EAAf,CAAsBoS,WAAYA,EAAY5R,QAASA,QAC/F,kBAAC,IAAD,CAAOyZ,KAAK,UAAUvQ,UAAYmR,KAClC,kBAAC,IAAD,CAAOZ,KAAK,iBAAiBvQ,UAAY6R,KACzC,kBAAC,IAAD,CAAOtB,KAAK,kBAAkBvQ,UAAYqS,KAC5C,kBAAC,GAAD,CAAc9B,KAAK,OAAOvQ,UAAYkQ,GAAgBxH,WAAYA,EAAY5R,QAASA,SClB3E4b,QACW,cAA7BlI,OAAO3B,SAAS8J,UAEe,UAA7BnI,OAAO3B,SAAS8J,UAEhBnI,OAAO3B,SAAS8J,SAASlU,MACvB,2DCZNmU,IAASpE,OAAO,kBAAC,GAAD,MAASvU,SAASC,eAAe,SD2H3C,kBAAmB2Y,WACrBA,UAAUC,cAAcC,MAAMhY,MAAK,SAAAiY,GACjCA,EAAaC,kB","file":"static/js/main.25557cf4.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brown-logo.3e9431dc.svg\";","module.exports = __webpack_public_path__ + \"static/media/order.43350967.svg\";","module.exports = __webpack_public_path__ + \"static/media/order-history.51ec7044.svg\";","module.exports = __webpack_public_path__ + \"static/media/straight-logo-no-icon.09a1068c.svg\";","module.exports = __webpack_public_path__ + \"static/media/market.3bb4ac0e.svg\";","module.exports = __webpack_public_path__ + \"static/media/cows.91ddc8b3.jpg\";","import { createContext, useContext } from 'react';\r\n\r\nexport const AuthContext = createContext()\r\n\r\nexport function useAuth() {\r\n\treturn useContext(AuthContext)\r\n}\r\n\r\n","import React, { useState } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport './styles/Header.css';\r\nimport { useAuth } from './auth.js';\r\nimport logo from './images/straight-logo-no-icon.svg';\r\n\r\n\r\nconst Header = ( props ) => {\r\n\r\n  const { setAuthTokens } = useAuth();\r\n\r\n  function logOut() {\r\n    setAuthTokens()\r\n    localStorage.clear()\r\n  }\r\n\r\n  let is_farmer = localStorage.getItem(\"is_farmer\") === \"true\"\r\n \r\nreturn (\r\n    <header className=\"header\">\r\n      <NavLink to=\"/app/home\"><img src={logo} className={ \"header-logo\" }/></NavLink>\r\n      <nav className={props.hideNav ? \"hide-nav\" : \"navigation\"}>\r\n        <NavLink to=\"/app/home\" exact activeClassName=\"active\">Home</NavLink>\r\n        <NavLink to=\"/app/about\" activeClassName=\"active\">About</NavLink>\r\n        <NavLink to=\"/app/cart\" activeClassName=\"active\">Cart<span className={!!(props.nVegetables > 0) ? \"badge\" : \"no-items\"}>{props.nVegetables}</span></NavLink>\r\n        <NavLink to=\"/app/settings\" activeClassName=\"active\">Settings</NavLink>\r\n        <NavLink to=\"/login\" onClick={ logOut } activeClassName=\"active\">Log Out</NavLink>\r\n      </nav>\r\n    </header>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React, { useReducer } from 'react';\r\nimport '../styles/dropdown.css';\r\n\r\n\r\nconst DropDown = ( props ) => {\r\n\r\n\r\n    const dropDownState = { listOpen: false,\r\n                          };\r\n\r\n\tfunction dropDownReducer(state, newState) {\r\n\t\treturn{ ...state, ...newState }\r\n\t};\r\n\r\n    const [state, setState] = useReducer(dropDownReducer, dropDownState)\r\n    \r\n    const toggleList = () => {\r\n        setState({ listOpen: !state.listOpen })\r\n    };\r\n\r\n\r\n    let cName = props.className ? \" \" + props.className : \"\"\r\n    let listItem = props.className ? \"dd-list-item\"  + cName + \"-list-item\" : \"dd-list-item\"\r\n    let wrapper = props.className ? \"dd-wrapper\" + cName + \"-wrapper\" : \"dd-wrapper\"\r\n    let headerSelected = props.className ? \"dd-header-selected\" + cName + \"-header-selected\" : \"dd-header-selected\"\r\n    let header = props.className ? \"dd-header\" + cName + \"-header\" : \"dd-header\"\r\n    let headerTitle = props.className ? \"dd-header-title\" + cName + \"-header-title\" : \"dd-header-title\"\r\n    let list = props.className ? \"dd-list\" + cName + \"-list\" : \"dd-list\"\r\n\r\n\r\n    let dropDownValuesToUse = props.dropDownMap ? props.dropDownMap: props.dropDownValues;\r\n    let title = props.selected ? props.selected : props.dropDownTitle\r\n\r\n    const dropDownContent = (\r\n        dropDownValuesToUse.map((item) => (\r\n            <li className={ state.listOpen ? listItem : \"inactive\" }\r\n                key={props.dropDownMap ? item.id : undefined}\r\n                onClick={async () => { \r\n                                 await props.resetRequest()\r\n                                 props.dropDownSelect(item)\r\n                                 toggleList()\r\n                               }\r\n                        }> \r\n                { props.dropDownMap ? item.name: item } \r\n            </li>)) \r\n        );\r\n\r\n    return (\r\n        <div className={wrapper}>\r\n            <div className={state.listOpen ? headerSelected : header}\r\n                 onClick={() => { toggleList()\r\n                                 }\r\n                         }>\r\n                <div className={headerTitle}>{ title }</div>\r\n            </div>\r\n            <ul className={ state.listOpen ? list : \"inactive\" }>\r\n                { dropDownContent }\r\n            </ul>\r\n        </div>\r\n    );\r\n\r\n}\r\n\r\nexport default DropDown;\r\n","import React from 'react';\r\n\r\nconst Input = ( props ) => {\r\n\r\n  let handleEnter = (event) => {\r\n    if(event.key === 'Enter') {document.getElementById('enter-button').click()}\r\n  }\r\n\r\n  let type = props.type === undefined ? \"text\" : props.type;\r\n  let required = props.required ? true : false;\r\n  let labelClass = props.labelClass ? props.labelClass : \"right-label\";\r\n  let max = props.has_max ? props.has_max : undefined;\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {labelClass === \"left-label\" && <label className={labelClass}>{props.label}</label>}\r\n      <input\r\n        className=\"form-input\"\r\n        name={props.name}\r\n        type={type}\r\n        value={props.value}\r\n        onChange={props.handleChange}\r\n        placeholder={props.placeholder}\r\n        max={max}\r\n        min={0}\r\n        onKeyPress={props.onEnter && handleEnter}\r\n      />\r\n      {labelClass === \"right-label\" && <label className={labelClass}>{props.label}</label>}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Input;","import { useEffect, useCallback } from 'react';\r\nimport { set } from 'date-fns';\r\n\r\n\r\nexport function DefaultCallbackGetRequest(endPoint, authTokens, stateHandler) {\r\n    let url = process.env.REACT_APP_API_URL + endPoint;\r\n\r\n    let header = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Token ' + authTokens\r\n    };\r\n\r\n    const handleCallback = useCallback(async (url_ending) => {\r\n        await fetch(url + url_ending, {\r\n            method: 'GET',\r\n            headers: header,\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => stateHandler(json))\r\n    }, []);\r\n\r\n    return (handleCallback);\r\n}\r\n\r\n\r\nexport function DefaultCallbackPostRequest(endPoint, bodyData, authTokens) {\r\n    let url = process.env.REACT_APP_API_URL + endPoint;\r\n\r\n    let header = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Token ' + authTokens\r\n    };\r\n\r\n    const handleCallback = useCallback(async (setLoading, setSuccess, setState = false) => {\r\n        setLoading(true)\r\n        await fetch(url, {\r\n            method: 'POST',\r\n            headers: header,\r\n            body: JSON.stringify(bodyData)\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                setSuccess(json.status)\r\n                setState && setState(json.order_id)\r\n            })\r\n\r\n        setLoading(false)\r\n    }, [bodyData]);\r\n    return (handleCallback);\r\n}\r\n\r\n\r\nexport function PaymentCallbackPostRequest(endPoint, authTokens) {\r\n    let url = process.env.REACT_APP_API_URL + endPoint;\r\n\r\n    let header = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Token ' + authTokens\r\n    };\r\n\r\n    const handleCallback = useCallback(async (setLoading, setSuccess, bodyData, setState = false) => {\r\n        setLoading(true)\r\n        await fetch(url, {\r\n            method: 'POST',\r\n            headers: header,\r\n            body: JSON.stringify(bodyData)\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                setSuccess(json.status)\r\n                setState && setState(json.order_id)\r\n            })\r\n\r\n        setLoading(false)\r\n    }, [authTokens]);\r\n    return (handleCallback);\r\n}\r\n\r\nexport function ResetPasswordCallbackPostRequest(endPoint) {\r\n    let url = process.env.REACT_APP_API_URL + endPoint;\r\n\r\n    let header = { 'Content-Type': 'application/json', };\r\n\r\n    const handleCallback = useCallback(async (setLoading, setSuccess, bodyData, setState = false) => {\r\n        setLoading(true)\r\n        await fetch(url, {\r\n            method: 'POST',\r\n            headers: header,\r\n            body: JSON.stringify(bodyData)\r\n        })\r\n            .then(res => res.json())\r\n            .then(json => {\r\n                setSuccess(json.status)\r\n                setState && setState(json.order_id)\r\n            })\r\n\r\n        setLoading(false)\r\n    }, []);\r\n    return (handleCallback);\r\n}\r\n\r\n\r\n\r\nexport function DefaultEffectApiRequest(endPoint, methodInput, stateHandler, authTokens, dependency = null, body = null, refresh = null) {\r\n    let url = process.env.REACT_APP_API_URL + endPoint;\r\n\r\n    let header = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Token ' + authTokens\r\n    };\r\n\r\n    let abortController = new AbortController()\r\n\r\n    useEffect(() => {\r\n        async function fetchData() {\r\n            const requestData = await\r\n                fetch(url, {\r\n                    method: methodInput,\r\n                    headers: header,\r\n                    body: body\r\n                })\r\n            requestData\r\n                .json()\r\n                .then(requestData => stateHandler(requestData))\r\n\r\n        };\r\n\r\n        fetchData();\r\n\r\n        return (\r\n            abortController.abort()\r\n        )\r\n    }, [dependency, refresh]);\r\n}\r\n\r\nexport function EffectRequestWithDependency(endPoint, methodInput, stateHandler, authTokens, dependency = null, body = null, refresh = null) {\r\n    //todo: rename newDependency and merge into above request\r\n    let url = process.env.REACT_APP_API_URL + endPoint;\r\n\r\n    let header = {\r\n        'Content-Type': 'application/json',\r\n        'Authorization': 'Token ' + authTokens\r\n    };\r\n\r\n    let abortController = new AbortController()\r\n\r\n    useEffect(() => {\r\n\r\n        async function fetchData() {\r\n\r\n            const requestData = await\r\n                fetch(url, {\r\n                    method: methodInput,\r\n                    headers: header,\r\n                    body: body\r\n                })\r\n            requestData\r\n                .json()\r\n                .then(requestData => stateHandler(requestData))\r\n\r\n        };\r\n\r\n        if (dependency) {\r\n            fetchData();\r\n        }\r\n\r\n        return (\r\n            abortController.abort()\r\n        )\r\n    }, [dependency, refresh]);\r\n}","import React, { useReducer } from 'react';\r\nimport DropDown from './DropDown';\r\nimport Input from './Input';\r\nimport \"../styles/OrderForm.css\";\r\nimport { useAuth } from '../auth.js';\r\nimport { DefaultEffectApiRequest, DefaultCallbackGetRequest } from '../apiUtils/DefaultRequests';\r\nimport cows from '../images/cows.jpg';\r\n\r\n\r\nconst OrderForm = ( props ) => {\r\n\r\n    const { authTokens } = useAuth()\r\n\r\n    const orderState = {\r\n        selectedFarm: false,\r\n        Vegetables: [],\r\n        farms: [],\r\n        requested: null,\r\n        type: \"order\",\r\n        markets: false,\r\n        farm_plus_market: false,\r\n        selectedMarket: false,\r\n    };\r\n\r\n    function stateReducer(state, newState) {\r\n        return { ...state, ...newState }\r\n    };\r\n\r\n    const [order, setOrder] = useReducer(stateReducer, orderState)\r\n\r\n    const resetRequest = () => setOrder({requested: [],\r\n                                         farm_plus_market: false,\r\n                                         selectedMarket: false,\r\n                                         Vegetables: []\r\n                                        }) \r\n\r\n    const resetWithFarm = () => setOrder({requested: [],\r\n                                          farm_plus_market: false,\r\n                                          selectedFarm: false,\r\n                                          selectedMarket: false,\r\n                                          Vegetables: []\r\n                                        })                                         \r\n\r\n    const setFarms = (request) => { setOrder({ farms: request }) }\r\n\r\n    // get farms if farm is not passed    \r\n    DefaultEffectApiRequest('farm/', 'GET', setFarms, authTokens) \r\n\r\n    const selectFarm = (farm) => {\r\n        //set selectedFarm and reset requested vegetablei when switching selected farm\r\n        //order.farms.find(el => el.farm_name === \r\n        \r\n        setOrder({ selectedFarm: farm, requested: null})\r\n        getMarkets(farm.id)\r\n    }\r\n\r\n     \r\n    const selectMarket = (market) => {\r\n        let market_id = order.markets.find(el => el.name === market).id\r\n        let farm = order.selectedFarm.id + '/' + market_id\r\n        getFormDetails(farm)\r\n        setOrder({ farm_plus_market: farm })\r\n    }\r\n\r\n    const updateOrder = (event) => {\r\n        setOrder({ requested: {...order.requested, [event.target.name]: parseFloat(event.target.value) }});\r\n    }\r\n\r\n    const setVegetables = (vegetables) => {\r\n        setOrder({ 'Vegetables': vegetables });\r\n    }\r\n\r\n    const setMarkets = (markets) => {\r\n        setOrder( {'markets': markets })\r\n    }\r\n\r\n    const prepareRequest = (obj) => {\r\n        let keys = Object.keys(obj)\r\n        keys.map((key) => isNaN(obj[key]) && delete obj[key])\r\n    }\r\n\r\n    const getFormDetails = DefaultCallbackGetRequest('formDetails/', authTokens, setVegetables);\r\n    const getMarkets = DefaultCallbackGetRequest('markets/', authTokens, setMarkets);\r\n\r\n    //computeOrderPrice iterates through the requested veggies and computes the total price of requested veggies\r\n    let computeOrderPrice = () => { let totalPrice = 0; if(order.Vegetables && order.requested) {\r\n            //iterate through the order.requested object and set the key of each element to veggie\r\n            for(let veggie in order.requested) {\r\n                let requestedAmount = order.requested[veggie];\r\n                //find the veggie from the Vegetables array with the same name as the vegetable in the requested object\r\n                let veggiePrice = order.Vegetables.find(el => el.vegetable_name === veggie).price;\r\n                totalPrice += requestedAmount * veggiePrice;\r\n            }\r\n        }\r\n        //added this because when you delete a requested amount it sets to NaN instead of 0\r\n        //TODO: fix the reason for why deleting a requested amount sets the requested amount to NaN\r\n        return isNaN(totalPrice) ? 0 : totalPrice;\r\n    }\r\n\r\n    let farmNameMap = order.farms.map((farm) => ({\r\n        \"name\": farm.farm_name,\r\n        \"id\": farm.id\r\n    }));\r\n    \r\n\r\n    const marketKeys = Object.keys(order.markets)\r\n    const market_names = marketKeys.map((key) => order.markets[key]['name'])\r\n\r\n    const vegKeys = Object.keys(order.Vegetables)\r\n    const vegetableRows = (\r\n        vegKeys.map((key) => {\r\n            let veg = order.Vegetables[key]\r\n            let has_max = props.max ? veg.available_amount : false\r\n        return (\r\n            <div className={veg.available_amount === 0 ? \"vegetable-row unavailable\" : \"vegetable-row\"}>\r\n                <div className=\"row-column\">\r\n                    <span className=\"vegetable-name\">{ veg.vegetable_name }</span>\r\n                    <div className=\"vegetable-details\">\r\n                        <span className=\"vegetable-availability\">{ veg.available_amount + veg.unit_weight + \" available\" }</span>\r\n                        <span className=\"vegetable-price\">{\"$\" + veg.price + \" per \" + veg.unit_weight }</span>\r\n                            {veg.available_amount !== 0 && \r\n                                <Input name={veg.vegetable_name}\r\n                                handleChange={updateOrder}\r\n                                value={order.veg}\r\n                                label={veg.unit_weight}\r\n                                placeholder=\"0\"\r\n                                type=\"number\"\r\n                                has_max={has_max}\r\n                                className=\"overview-input\"\r\n                                />\r\n                            }\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )}\r\n        )\r\n    )\r\n\r\n    const selectedFarm = (order.selectedFarm && <div className=\"selected-farm\">{order.selectedFarm}</div>)\r\n    const market = order.farm_plus_market && order.markets.find(el => el.id.toString() === order.farm_plus_market.match('(?<=/\\)(.*)')[0]).name\r\n    const totalPrice = computeOrderPrice()\r\n\r\n    return (\r\n        <>\r\n        <div className=\"cows\"></div>\r\n        <div className=\"order-form\">\r\n            <div className=\"farm\">\r\n\t\t\t\t{ props.backButton }\r\n                <div className=\"form-top-container\">\r\n                    <div className=\"order-dropdown\">\r\n                        <DropDown dropDownSelect={selectFarm}\r\n                                dropDownTitle=\"Choose a Farmer\"\r\n                                dropDownMap={farmNameMap}\r\n                                resetRequest={resetWithFarm}\r\n                        />\r\n                    </div>\r\n                    <div className=\"order-dropdown\">\r\n                        {order.selectedFarm &&\r\n                        <DropDown dropDownSelect={selectMarket}\r\n                                dropDownTitle=\"Choose a Market\"\r\n                                dropDownValues={market_names}\r\n                                resetRequest={resetRequest}\r\n                        />}\r\n                    </div>\r\n                </div>\r\n            </div> \r\n            { selectedFarm && <span className=\"farm-name\">{order.selectedFarm.name + (order.farm_plus_market ? (' at ' + market) : '')}</span> }\r\n            <div className=\"vegetables\">\r\n                {order.selectedFarm && vegetableRows}\r\n            </div>\r\n        </div>\r\n        <div>\r\n            {order.farm_plus_market && (<div className=\"form-bottom\">\r\n                <div > \r\n                    Total Price: ${totalPrice}\r\n                </div> \r\n                <br/>\r\n                <button type=\"submit\"\r\n                        className=\"default-button order-button\"\r\n                        onClick={() => { prepareRequest(order.requested)\r\n                                         props.updateCart(order, order.Vegetables, order.selectedFarm, market, totalPrice) }\r\n                                }>\r\n                    <span>Add to Cart</span>\r\n                </button>\r\n            </div>)}\r\n        </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default OrderForm;\r\n","import React from 'react';\r\nimport \"../styles/OrderForm.css\";\r\nimport OrderForm from '../FormComponents/OrderForm'\r\n\r\n\r\nconst CustomerOrder = ( props ) => {\r\n\r\n    return (\r\n        <OrderForm\r\n         farm={false}\r\n         buttonName=\"Place Order\"\r\n         max={true}\r\n         updateCart={props.updateCart}\r\n         backButton={props.backButton}\r\n        />\r\n    )\r\n}\r\n\r\nexport default CustomerOrder;\r\n","import React from 'react';\r\n\r\nconst DefaultTiles = ( props ) => {\r\n\r\n\tconst clickTile = (tile) => {\r\n\t\tprops.setSelectedTile(tile.name)\r\n\t\tprops.setSelectedComponent(tile.component)\r\n\t}\r\n\r\n\tconst setClass = (tile) => {\r\n\t\tif (props.selectedTile === false) {\r\n\t\t\treturn tile.class\r\n\t\t} else {\r\n\t\t\treturn \"hidden\"\r\n\t\t}\r\n\t}\r\n\r\n\tlet keys = Object.keys(props.tileDetails)\r\n\tconst createTiles = (\r\n\t\tkeys.map(key => {\r\n\t\t\tlet tile = props.tileDetails[key]\r\n\t\t\treturn (\r\n\t\t\t\t<div className={setClass(tile)} \r\n\t\t\t\t     key={key}\r\n\t\t\t\t     id={tile.css_id} \r\n\t\t\t\t     onClick={() => {clickTile(tile);\r\n\t\t\t\t\t                 props.tileOnClick && props.tileOnClick(tile)}}>\r\n\t\t\t\t\t<span className={props.nameSize}>{tile.name}</span>\r\n\t\t\t\t\t{tile.content && tile.content}\r\n\t\t\t\t</div>\t\r\n\t\t\t)\r\n\t\t})\r\n\t)\r\n\r\n\treturn (\r\n\t\t<>\r\n\t\t\t{createTiles}\r\n\t\t\t{props.selectedComponent && <div className=\"selected-tile\" id=\"selected-tile\">{props.selectedComponent}</div>}\r\n\t\t</>\r\n\t)\r\n}\r\nexport default DefaultTiles;","import React, { useReducer, useState, useEffect } from 'react';\r\nimport Input from '../FormComponents/Input';\r\nimport \"../styles/OrderForm.css\";\r\nimport { useAuth } from '../auth.js';\r\nimport { EffectRequestWithDependency, DefaultEffectApiRequest, DefaultCallbackPostRequest, PaymentCallbackPostRequest } from '../apiUtils/DefaultRequests';\r\nimport { RingLoader } from 'react-spinners';\r\nimport DefaultTiles from '../FormComponents/DefaultTiles.js';\r\nimport DropDown from '../FormComponents/DropDown.js';\r\n\r\n\r\nconst Inventory = ( props ) => {\r\n\r\n    const ADD_NEW_PRODUCE = \"Add New Produce\"; \r\n\tconst [selectedTile, setSelectedTile] = useState(false)\r\n    const [selectedComponent, setSelectedComponent] = useState(false)\r\n    const [showAddRemove, setShowAddRemove] = useState(false)\r\n    const [refresh, setRefresh] = useState(false)\r\n\r\n\tconst backButton = (toBack, component) => { return(<button className=\"back-button\" \r\n\t\t\t\t\t\t\t\tid=\"back\" \r\n\t\t\t\t\t\t\t\tonClick={ () => {setSelectedTile(toBack)\r\n                                                 setSelectedComponent(component)\r\n                                                 setRefresh(!refresh)\r\n                                                 resetRequest()\r\n\t\t\t\t\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t\t\t\t}><span></span></button>)}\r\n\r\n    const { authTokens } = useAuth()\r\n\r\n    const orderState = {\r\n        type: \"\",\r\n        Vegetables: [],\r\n        VegetableDetails: [],\r\n        requested: {},\r\n        update: [],\r\n        loading: false,\r\n        success: null,\r\n        selectedVegetable: '',\r\n        farm: null\r\n    };\r\n\r\n    function stateReducer(state, newState) {\r\n        return { ...state, ...newState }\r\n    };\r\n\r\n    const [order, setOrder] = useReducer(stateReducer, orderState)\r\n\r\n    const setOrderType = (selected) => {\r\n        setOrder({ type: selected.name })\r\n        selected.name === ADD_NEW_PRODUCE && setSelectedVegetable(ADD_NEW_PRODUCE)\r\n        setRefresh(!refresh)\r\n    }\r\n\r\n    const setFarm = (request) => {\r\n        setOrder({ farm: request['farm']['id'] })\r\n    }\r\n\r\n    const setVegetables = (vegetables) => {\r\n        setOrder({ 'Vegetables': vegetables });\r\n    }\r\n\r\n    const setVegetableDetails = (vegetables) => {\r\n        setOrder({ 'VegetableDetails': vegetables });\r\n    }\r\n\r\n    const setSelectedVegetable = (vegetable) => {\r\n        let selectedVegetable = vegetable === ADD_NEW_PRODUCE ? vegetable : order.VegetableDetails.find(el => el.id === vegetable.id)\r\n        setOrder({ 'selectedVegetable': selectedVegetable })\r\n        vegetable !== ADD_NEW_PRODUCE && setShowAddRemove(true)\r\n    }\r\n\r\n    const updateOrder = (event) => {\r\n        setOrder({ requested: {...order.requested, [event.target.name]: parseFloat(event.target.value) }});\r\n    }\r\n\r\n    const updateVegetables = (event) => {\r\n        if(order.selectedVegetable !== ADD_NEW_PRODUCE) {\r\n        let originalValue = order.VegetableDetails.find(el => el.id === order.selectedVegetable.id)[event.target.name]\r\n        event.target.value.length > 0 ? setOrder({ update: {...order.update, [event.target.name]: event.target.value}}) :\r\n                                        setOrder({ update: {...order.update, [event.target.name]: originalValue}})\r\n        let amount = order.requested ? order.requested[Object.keys(order.requested)[0]] : 0\r\n        event.target.name === 'vegetable_name' && (event.target.value.length > 0 ? \r\n                                                    setOrder({ requested: { [event.target.value]: amount}}) :\r\n                                                    setOrder({requested: []}))\r\n        } else {\r\n            setOrder({ update: {...order.update, [event.target.name]: event.target.value}})\r\n            event.target.name === 'vegetable_name' && setOrder({ requested: { [event.target.value]: 0 }})\r\n        }\r\n    }\r\n\r\n    const updateUnitWeight = (weight) => {\r\n        setOrder({update: {...order.update, [weight.type]: weight.name}})\r\n    }\r\n\r\n    const setLoading = (isLoading) => { setOrder({ loading: isLoading }) }\r\n    const setSuccess = (response) => { setOrder({ success: response })\r\n }\r\n\r\n    // reset the request fields when dropdown is clicked\r\n    const resetRequest = () => { setSuccess(null)\r\n                                 setOrder({type: ''})\r\n                                 setOrder({requested: []})\r\n                                 setOrder({update: []})\r\n                                 setOrder({selectedVegetable: ''})\r\n                                 setShowAddRemove(false)\r\n                               }\r\n    \r\n    // check if any form inputs should be removed\r\n    const prepareRequest = (obj, func) => {\r\n        let keys = Object.keys(obj)\r\n        keys.map((key) => func(obj[key]) && delete obj[key])\r\n    }\r\n\r\n    // get farm and vegetables\r\n    DefaultEffectApiRequest('user/', 'GET', setFarm, authTokens)\r\n    EffectRequestWithDependency('farmVegetable/' + order.farm, 'GET', setVegetableDetails, authTokens, order.farm, null, refresh)\r\n    EffectRequestWithDependency('formDetails/' + order.farm + '/0', 'GET', setVegetables, authTokens, order.farm, null, refresh)\r\n\r\n    // request to post vegetable orders\r\n    const submitChanges = DefaultCallbackPostRequest('farmVegetable/' + order.farm, order, authTokens) \r\n    \r\n    const updateKeys = ['vegetable_name', 'description', 'price', 'unit_weight']\r\n    const unitList = ['lbs', 'kgs', 'each', 'dozen', ]\r\n    const unitMap = unitList.map(el => ({\"name\": el, \"type\": \"unit_weight\", \"id\": el}))\r\n    const harmlessReset = () => null\r\n\r\n    let updateVegetableRows = (\r\n        updateKeys.map((key) => {\r\n            let output = key !== \"unit_weight\" ?\r\n                <Input name={key}\r\n                       key={key}\r\n                       type=\"text\"\r\n                       value={order.update.key}\r\n                       handleChange={updateVegetables}\r\n                       label={key}\r\n                       className=\"inventory-overview-input\"\r\n                       placeholder={order.selectedVegetable[key]}\r\n                /> :\r\n                <DropDown dropDownSelect={updateUnitWeight}\r\n                          dropDownTitle={key}\r\n                          dropDownMap={unitMap}\r\n                          key={key}\r\n                          resetRequest={harmlessReset}\r\n                          selected={order.update.unit_weight}\r\n                />\r\n                return output\r\n        })\r\n    )\r\n\r\n    // remove vegetable requires a dispatch which must be implemented with a use effect\r\n    const submitOrder = PaymentCallbackPostRequest('formDetailsPost/', authTokens)\r\n\r\n    const vegetableRows = () => {\r\n        let veg = order.Vegetables.find(el => el.id === order.selectedVegetable.id)\r\n        let vegAmount =  ((Object.keys(order.requested)[0] && order.requested[Object.keys(order.requested)[0]] > 0) ? order.requested[veg.vegetable_name] : \"0 \") \r\n        return (\r\n            <div className=\"update-row\">\r\n                <div className=\"inventory-details\">\r\n                    <div className=\"inventory-overview\">{updateVegetableRows}</div>\r\n                    <button type=\"submit\"\r\n                            className=\"default-button order-button\"\r\n                            onClick={() => {\r\n                                    submitChanges(setLoading, setSuccess)\r\n                                    setRefresh(!refresh)\r\n                                    } \r\n                            }\r\n                            disabled={order.loading}\r\n                    >   \r\n                        { order.loading && <RingLoader loading={order.loading}/> }\r\n                        { !order.loading && <span>Update Inventory</span> }\r\n                    </button>\r\n                </div>\r\n                <div className=\"add-remove-container\">\r\n                    <div className=\"add-remove-contents\">\r\n                        <span className=\"add-remove-title\">Change Available Amount</span>\r\n                        <div className=\"add-remove-details\">\r\n                            <span className=\"add-remove-availability\">{ veg.available_amount + ' ' + veg.unit_weight + \" available\" }</span>\r\n                                <Input name={veg.vegetable_name}\r\n                                    handleChange={updateOrder}\r\n                                    value={order.veg}\r\n                                    label={null}\r\n                                    placeholder=\"0\"\r\n                                    type=\"number\"\r\n                                    has_max={false}\r\n                                    className=\"add-remove-input overview-input\"\r\n                                />\r\n                        </div>\r\n                        <div className=\"update-buttons\">\r\n                            <button type=\"submit\"\r\n                                    className=\"default-button inventory-add-button\"\r\n                                    onClick={() => {\r\n                                            prepareRequest(order.requested, isNaN)\r\n                                            prepareRequest(order.update, (param => param.length === 0))\r\n                                            let newBody = JSON.parse(JSON.stringify(order))\r\n                                            newBody.type = \"add_inventory\"\r\n                                            submitOrder(setLoading, setSuccess, newBody, setRefresh)\r\n                                            } \r\n                                    }\r\n                                    disabled={order.loading}\r\n                            >   \r\n                            { !order.loading && <span>{\"Add \" + vegAmount + ' ' + veg.unit_weight }</span> }\r\n                            </button>\r\n                            <button type=\"submit\"\r\n                                    className=\"default-button inventory-remove-button\"\r\n                                    onClick={() => {\r\n                                            prepareRequest(order.requested, isNaN)\r\n                                            prepareRequest(order.update, (param => param.length === 0))\r\n                                            let newBody = JSON.parse(JSON.stringify(order))\r\n                                            newBody.requested = Object.keys(newBody.requested).map(el => [{[el]: newBody.requested[el] * -1}])[0][0]\r\n                                            newBody.type = \"remove_inventory\"\r\n                                            submitOrder(setLoading, setSuccess, newBody, setRefresh)\r\n                                            } \r\n                                    }\r\n                                    disabled={order.loading}\r\n                            >   \r\n                            { !order.loading && <span>{\"Remove \" + vegAmount + ' ' + veg.unit_weight }</span> }\r\n                            </button>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        )\r\n    }    \r\n    \r\n    \r\n    var success = order.success;\r\n\r\n    // tiles for individual vegetables\r\n    var vegetableKeys = Object.keys(order.Vegetables)\r\n    const veggieObj = (\r\n        vegetableKeys.map(key => {\r\n            let name = order.Vegetables[key].vegetable_name\r\n            let id = order.Vegetables[key].id\r\n            return (\r\n                {\r\n                    class: \"tile small-tile\",\r\n                    name: name,\r\n                    id: id,\r\n                    css_id: name.replace(/\\s+/g, '-').toLowerCase(),\r\n                }\r\n            )\r\n        })\r\n    )\r\n\r\n    const veggieTiles = (selectedTile) => {\r\n        return (\r\n        <>\r\n        <div className=\"tile-container max-width\">\r\n            <DefaultTiles tileDetails={veggieObj} \r\n                          setSelectedComponent={setSelectedComponent}\r\n                          selectedTile={selectedTile}\r\n                          setSelectedTile={setSelectedTile}\r\n                          tileOnClick={setSelectedVegetable}\r\n                          nameSize=\"tile-name-small\"\r\n            />\r\n        </div>\r\n        </>\r\n    )}\r\n\r\n    const obj = {\r\n\t\t0: {\r\n\t\t\tclass: \"tile medium-tile\",\r\n\t\t\tname: ADD_NEW_PRODUCE,\r\n\t\t\tcss_id: \"add-inventory\",\r\n\t\t},\r\n\t\t1: {\r\n\t\t\tclass: \"tile medium-tile\",\r\n\t\t\tname: \"Your Produce\",\r\n            css_id: \"remove-inventory\",\r\n            component: veggieTiles(selectedTile),\r\n\t\t},\r\n    }\r\n\r\n    const tileName = () => {\r\n        if(selectedTile === ADD_NEW_PRODUCE | selectedTile === \"Your Produce\") {return(selectedTile)}\r\n        else if(order.selectedVegetable) {return (order.Vegetables.find(el => el.id === order.selectedVegetable.id).vegetable_name)}\r\n        else {return(\"Inventory\")}\r\n    }\r\n\r\n    let backButtonTypes = (selectedTile === \"Your Produce\" | selectedTile === ADD_NEW_PRODUCE) ? \r\n                            backButton(false, false) : \r\n                            ((selectedTile !== false) ? \r\n                            backButton(\"Your Produce\", veggieTiles(false)) : props.backButton)\r\n\r\n    return (\r\n        <>\r\n        <div className=\"cows\"></div>\r\n        <div className=\"order-form\">  \r\n            <div className=\"form-top\">\r\n                {selectedTile ? backButtonTypes : props.backButton}      \r\n                <span className=\"farm-name\">{tileName()}</span>\r\n            </div>\r\n            <div className=\"tile-container max-width\">\r\n                <DefaultTiles tileDetails={obj} \r\n                              selectedComponent={selectedComponent}\r\n                              setSelectedComponent={setSelectedComponent}\r\n                              selectedTile={selectedTile}\r\n                              setSelectedTile={setSelectedTile}\r\n                              tileOnClick={setOrderType}\r\n                              nameSize=\"tile-name-medium\"\r\n                />\r\n            </div>\r\n            {showAddRemove && <div className=\"inventory-vegetables\">{vegetableRows()}</div>}\r\n            {order.selectedVegetable === ADD_NEW_PRODUCE && <div className=\"inventory-overview\">{updateVegetableRows}</div>}\r\n            {!!(order.selectedVegetable === ADD_NEW_PRODUCE) && (<div className=\"form-bottom\">\r\n            <button type=\"submit\"\r\n                    className=\"default-button order-button\"\r\n                    onClick={() => {\r\n                                    submitChanges(setLoading, setSuccess)\r\n                                    setRefresh(!refresh)\r\n                                    } \r\n                            }\r\n                    disabled={order.loading}\r\n            >   \r\n                { order.loading && <RingLoader loading={order.loading}/> }\r\n                { !order.loading && <span>Update Inventory</span> }\r\n            </button>\r\n                <br />\r\n            </div>)}\r\n            {!!((success >= 200) & (success < 210)) && <span>Inventory updated.</span>}\r\n            {!!(success >= 400) && <span>An error has occurred. Please try again later.</span>}\r\n        </div>\r\n       \r\n        </>\r\n    );\r\n}\r\n\r\nexport default Inventory;\r\n","import React, { useReducer, useState } from 'react';\r\nimport DropDown from './DropDown';\r\nimport \"../styles/OrderForm.css\";\r\nimport { useAuth } from '../auth.js';\r\nimport { DefaultEffectApiRequest } from '../apiUtils/DefaultRequests'\r\n\r\n\r\nconst OrderView = ( props ) => {\r\n\r\n    \r\n    const { authTokens } = useAuth();\r\n\r\n    const [refresh, setRefresh] = useState(false);\r\n\r\n    const orderState = {\r\n        orderSummary: [],\r\n        orderNumbers: [],\r\n        query: false,\r\n        type: \"order\",\r\n    };\r\n\r\n    function stateReducer(state, newState) {\r\n        return { ...state, ...newState }\r\n    };\r\n\r\n    const [orders, setOrderState] = useReducer(stateReducer, orderState)\r\n    \r\n\r\n    const setSummaryOrders = (request) => {\r\n        setOrderState({\"orderSummary\": request})\r\n    }\r\n\r\n    const setQuery = (dropdown) => {\r\n        let value = dropdown.type === \"farm_id\" ? farmNames.find(el => el.farm_name === dropdown.name).id.toString() : \r\n                    (dropdown.type === \"market_id\" ? markets.find(el => el.name === dropdown.name).id.toString() : \r\n                    dropdown.name.replace(/\\s+/g, '_').toLowerCase())\r\n        setOrderState({query: {...orders.query, [dropdown.type]: value}})\r\n    }\r\n\r\n    let [farmNames, setFarmNames] = useState([]);\r\n    let [markets, setMarkets] = useState([])\r\n\r\n    DefaultEffectApiRequest(\"orders/\", \"POST\", setSummaryOrders, authTokens, orders.query, JSON.stringify(orders.query), refresh)\r\n    DefaultEffectApiRequest(\"farm/\", \"GET\", setFarmNames, authTokens, null, null, refresh);\r\n    DefaultEffectApiRequest(\"getMarkets/\", \"GET\", setMarkets, authTokens, null, null, refresh);\r\n\r\n    const makeRows = (row) => {\r\n        return (\r\n        Object.keys(row).map(key => {\r\n            return (\r\n                <div className=\"order-summary-cell\">{row[key]}</div>\r\n            )\r\n        })\r\n        )\r\n    }\r\n\r\n    const orderDetails = () => {\r\n        let orderRows = orders.orderSummary\r\n        let details = Object.keys(orderRows).map(key => {\r\n            let row = makeRows(orderRows[key])\r\n            return <div className=\"order-summary-row\">{row}</div>\r\n        })\r\n        let header = <div className=\"order-summary-row row-header\">{Object.keys(orderRows[0]).map(key => <div className=\"order-summary-cell cell-header\">{key}</div>)}</div>\r\n        return (\r\n            <div className=\"order-summary-container\">\r\n                {header}\r\n                {details}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    const statusTypes = ['complete', 'paid', 'processing'];\r\n    const orderTypes = ['Add Inventory', 'Remove Inventory', 'order']\r\n    let names = Object.keys(farmNames).map(el => farmNames[el].farm_name);\r\n    let marketNames = Object.keys(markets).map(el => markets[el].name);\r\n    const makeMap = (values, name) => values.map(el => ({\"name\": el, \"type\": name}))\r\n    const harmlessReset = () => null\r\n\r\n    const resetButton = <button className=\"back-button reset-button\" \r\n\t\t\t\t\t\t\t\tid=\"back\" \r\n                                onClick={ () => {setOrderState({query: false})\r\n                                                 setRefresh(!refresh)\r\n                                }}><span></span>\r\n                        </button>\r\n\r\n    return (\r\n        <div className=\"order-summary-form\">\r\n            <div className=\"farm\"> \r\n                {props.backButton}\r\n                <div className=\"form-top-container\">\r\n                    <div className=\"order-dropdown\">\r\n                        <DropDown dropDownSelect={setQuery}\r\n                                dropDownTitle=\"Filter Status\"\r\n                                dropDownMap={makeMap(statusTypes, \"status\")}\r\n                                resetRequest={harmlessReset}\r\n                        />\r\n                    </div>\r\n                    <div className=\"order-dropdown\">\r\n                        <DropDown dropDownSelect={setQuery}\r\n                                dropDownTitle=\"Filter Farm\"\r\n                                dropDownMap={makeMap(names, \"farm_id\")} // has underscore for django query\r\n                                resetRequest={harmlessReset}\r\n                        />\r\n                    </div>\r\n                    <div className=\"order-dropdown\">\r\n                        <DropDown dropDownSelect={setQuery}\r\n                                dropDownTitle=\"Filter Market\"\r\n                                dropDownMap={makeMap(marketNames, \"market_id\")} // has underscore for django query\r\n                                resetRequest={harmlessReset}\r\n                        />\r\n                    </div>\r\n                    <div className=\"order-dropdown\">\r\n                        <DropDown dropDownSelect={setQuery}\r\n                                dropDownTitle=\"Filter Order Type\"\r\n                                dropDownMap={makeMap(orderTypes, \"order_type\")}\r\n                                resetRequest={harmlessReset}\r\n                        />\r\n                    </div>\r\n                    {resetButton}\r\n                </div>\r\n            </div>\r\n            <div className=\"order-summary\">\r\n                {orders.orderSummary.length > 0 && orderDetails()}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default OrderView;\r\n","import React from 'react';\r\nimport '../styles/RadioButton.css';\r\n\r\n\r\nfunction RadioButton({ className, valuesObj, checkedObj, setSelected, setList, requestKey, selectName}) {\r\n\r\n\r\n  let cName = className ? \" \" + className : \"\"\r\n  let radioInput = className ? \"radio-input\" + cName + \"-radio-input\" : \"radio-input\"\r\n  let labelChecked = className ? \"label-checked\" + cName + \"-label-checked\" : \"label-checked\"\r\n  let labelUnchecked = className ? \"label-unchecked\" + cName + \"-label-unchecked\" : \"label-unchecked\"\r\n  let container = className ? \"checkbox-container\" + cName + \"-checkbox-container\" : \"checkbox-container\"\r\n\r\n  const handleSelect = (event) => {\r\n    let checkedKeys = Object.keys(checkedObj)\r\n    console.log(checkedKeys)\r\n    console.log(event.target.name)\r\n    let dayIndex = checkedKeys.find(key => checkedObj[key].id.toString() === event.target.id)\r\n    let val = checkedObj[dayIndex].id\r\n\r\n    let newList = JSON.parse(JSON.stringify(valuesObj))\r\n    // find and remove or add item based on index\r\n    let newListIndex = newList.findIndex(el => el === val)        \r\n    let newval = !(checkedObj[dayIndex].selected)\r\n    \r\n    setSelected(dayIndex, selectName, newval)\r\n    newListIndex !== -1 ? newList.splice(newListIndex, 1) : newList.push(val)\r\n    setList(requestKey, newList)\r\n  }\r\n\r\n    const checkedKeys = Object.keys(checkedObj)\r\n    const checkboxes = checkedKeys.map(key => {\r\n        let el = checkedObj[key]\r\n        let value = el.selected\r\n        let name = el.id\r\n        let id = el.id\r\n        let text = el.name\r\n\r\n        return (\r\n        <div className={container}>\r\n          <label className={value ? labelChecked : labelUnchecked}>{text} \r\n            <input className={radioInput} \r\n                   type=\"checkbox\"\r\n                   name={name}\r\n                   value={value}\r\n                   onChange={handleSelect}\r\n                   checked={value}\r\n                   id={id}\r\n                   key={name}\r\n            />\r\n          </label>\r\n        </div>\r\n        )\r\n    })\r\n\r\n  return (checkboxes);\r\n}\r\n\r\nexport default RadioButton;","import React, { useReducer, useState } from 'react';\r\nimport Input from '../FormComponents/Input';\r\nimport \"../styles/OrderForm.css\";\r\nimport { useAuth } from '../auth.js';\r\nimport { DefaultEffectApiRequest, DefaultCallbackGetRequest, DefaultCallbackPostRequest } from '../apiUtils/DefaultRequests';\r\nimport { RingLoader } from 'react-spinners';\r\nimport RadioButton from '../FormComponents/RadioButton';\r\nimport DefaultTiles from '../FormComponents/DefaultTiles.js';\r\nimport DropDown from '../FormComponents/DropDown.js';\r\n\r\nconst Markets = (props) => {\r\n    const ADD_NEW_MARKET = \"Add New Market\";\r\n\r\n    const [selectedTile, setSelectedTile] = useState(false)\r\n    const [selectedComponent, setSelectedComponent] = useState(false)\r\n    const [refresh, setRefresh] = useState(false)\r\n\r\n    const backButton = (<button className=\"back-button\"\r\n        id=\"back\"\r\n        onClick={() => {\r\n            setSelectedTile(false)\r\n            setSelectedComponent(false)\r\n            setRefresh(!refresh)\r\n            resetRequest()\r\n        }\r\n        }><span></span></button>)\r\n\r\n    const { authTokens } = useAuth()\r\n\r\n    let days = [\"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\", \"Sunday\"]\r\n    const dayMap = days.map(el => ({ \"name\": el, \"type\": \"dayOfWeek\", \"id\": el.substring(0, 3).toUpperCase(), \r\n                                     \"selected\": false}))\r\n\r\n    const marketState = {\r\n        marketList: [],\r\n        request: [],\r\n        Vegetables: [],\r\n        selectedVegetables: [],\r\n        selectedDays: dayMap,\r\n        loading: false,\r\n        success: null,\r\n        selected: false,\r\n    };\r\n\r\n    function stateReducer(state, newState) {\r\n        return { ...state, ...newState }\r\n    };\r\n\r\n    const [markets, setMarkets] = useReducer(stateReducer, marketState)\r\n\r\n    const setMarketList = (markets) => {\r\n        let addNew = {\r\n            address: null,\r\n            created: null,\r\n            farm: markets.farm,\r\n            name: ADD_NEW_MARKET\r\n        }\r\n        markets.push(addNew)\r\n        setMarkets({ 'marketList': markets });\r\n    }\r\n\r\n    const updateRequest = (event) => {\r\n        setMarkets({ request: { ...markets.request, [event.target.name]: event.target.value } });\r\n    }\r\n\r\n    const updateCron = (time) => {\r\n        setMarkets({request: {...markets.request, [time.type]: time.id}})\r\n    }\r\n\r\n    const setFarm = (request) => {\r\n        setMarkets({ farm: request['farm']['id'] })\r\n    }\r\n\r\n    const setSelectedVegetable = (dayIndex, selectName, newval) => {\r\n        setMarkets({ selectedVegetables: { ...markets.selectedVegetables, [dayIndex]: {...markets.selectedVegetables[dayIndex], [selectName]: newval } } })\r\n    }\r\n\r\n    const setVegetableList = (requestKey, newList) => {\r\n        setMarkets({ request: { ...markets.request, [requestKey]: newList } })\r\n    }\r\n\r\n    const setSelectedDay = (dayIndex, selectName, newval) => {\r\n        setMarkets({ selectedDays: {...markets.selectedDays, [dayIndex]: { ...markets.selectedDays[dayIndex], [selectName]: newval } } })\r\n    }\r\n\r\n    const setDayOfWeek = (requestKey, newList) => {\r\n        setMarkets({ request: { ...markets.request, [requestKey]: newList } })\r\n    }\r\n\r\n    // get all vegetables available to the farmer for check buttons\r\n    const setVegetables = (vegetables) => {\r\n        setMarkets({ 'Vegetables': vegetables });\r\n        let vegKeys = Object.keys(vegetables)\r\n        let obj = vegKeys.map((key) => ({\"id\": vegetables[key].id, \"name\": vegetables[key].vegetable_name, \"selected\": false}))\r\n        setMarkets({ 'selectedVegetables': obj })\r\n    }\r\n\r\n    const setSelectedMarket = (select) => {\r\n        let obj = select.name === ADD_NEW_MARKET ? select.name : markets.marketList.find(el => el.name === select.name)\r\n        obj !== ADD_NEW_MARKET && setInitialMarketVegetables(obj.farm_vegetable, markets.Vegetables, markets.selectedVegetables)\r\n        let vegList = select.name === ADD_NEW_MARKET ? [] : obj.farm_vegetable\r\n        let dayList = select.name === ADD_NEW_MARKET ? [] : [] // TODO: convert end of cronstring to day list\r\n        setMarkets({\r\n            'request': {\r\n                'id': obj.id,\r\n                'farm_vegetable': vegList,\r\n                'dayOfWeek': dayList\r\n            }\r\n        })\r\n        setMarkets({ 'selected': obj })\r\n    }\r\n\r\n    const setLoading = (isLoading) => { setMarkets({ loading: isLoading }) }\r\n    const setSuccess = (response) => { setMarkets({ success: response }) }\r\n\r\n    // reset the request fields when dropdown is clicked\r\n    const resetRequest = async () => {\r\n        setVegetables(markets.Vegetables)\r\n        setSuccess(null)\r\n        setMarkets({ request: [] })\r\n        setMarkets({ selected: false })\r\n    }\r\n\r\n    // check if any form inputs should be removed\r\n    const prepareRequest = (obj, func) => {\r\n        let keys = Object.keys(obj)\r\n        keys.map((key) => func(obj[key]) && delete obj[key])\r\n    }\r\n\r\n    DefaultEffectApiRequest('user/', 'GET', setFarm, authTokens)\r\n    DefaultEffectApiRequest('markets/' + markets.farm, 'GET', setMarketList, authTokens, markets.farm, null, refresh)\r\n    DefaultEffectApiRequest('farmVegetable/' + markets.farm, 'GET', setVegetables, authTokens, markets.farm)\r\n\r\n    // request to post vegetable orders\r\n    const submitChanges = DefaultCallbackPostRequest('markets/' + markets.farm, markets.request, authTokens)\r\n\r\n    // market vegetables are a list of ids\r\n    // vegetable state is a list of vegetable objects\r\n    // selected vegetables is an object from name to true/false\r\n    const setInitialMarketVegetables = (marketVegetables, vegetablesState, selectedVegetables) => {\r\n        let trueVeggies = []\r\n        marketVegetables.forEach(id => trueVeggies.push(vegetablesState.find(el => el[\"id\"] === id).vegetable_name))\r\n        let filtered = trueVeggies.filter(el => el)\r\n        let vegKeys = Object.keys(selectedVegetables)\r\n        let obj = vegKeys.map(key => ({\"name\": selectedVegetables[key].name, \"id\": selectedVegetables[key].id,\r\n                                       \"selected\": filtered.includes(selectedVegetables[key].name) ? true : false}))\r\n        setMarkets({ 'selectedVegetables': obj })\r\n    }\r\n\r\n    const genericMarketKeys = ['name', 'address']\r\n\r\n    const marketRows = (\r\n        genericMarketKeys.map((key) =>\r\n            <Input name={key}\r\n                handleChange={updateRequest}\r\n                value={markets.request[key]}\r\n                placeholder={(markets.selected !== ADD_NEW_MARKET ? markets.selected[key] : \"\")}\r\n                label={key}\r\n                type=\"text\"\r\n                key={key}\r\n                className=\"market-input\"\r\n            />\r\n        )\r\n    )\r\n    \r\n    let hours = Array.from(Array(24).keys()).map(el => el.toString())\r\n    let minutes = [\"0\", \"15\", \"30\", \"45\"];\r\n\r\n    const hourMap = hours.map(el => ({ \"name\": el, \"type\": \"hour\", \"id\": el }));\r\n    const minuteMap = minutes.map(el => ({ \"name\": el, \"type\": \"minute\", \"id\": el }));\r\n    const endHourMap = hours.map(el => ({ \"name\": el, \"type\": \"endHour\", \"id\": el }));\r\n    const endMinuteMap = minutes.map(el => ({ \"name\": el, \"type\": \"endMinute\", \"id\": el }))\r\n\r\n    const dropdowns = (\r\n        <div className=\"cron-dropdown-container\">\r\n            <div className=\"cron-dropdown-row\">\r\n                <div className=\"cron-label\">Days Open - </div>\r\n                <div className=\"day-of-week-buttons\">\r\n                    <RadioButton valuesObj={markets.request.dayOfWeek}\r\n                                checkedObj={markets.selectedDays}\r\n                                setSelected={setSelectedDay}\r\n                                setList={setDayOfWeek}\r\n                                requestKey=\"dayOfWeek\"\r\n                                selectName=\"selected\"\r\n                                className=\"day-of-week\"\r\n                    />\r\n                </div>\r\n            </div>\r\n            <div className=\"cron-dropdown-row\" id=\"cron-dropdown\">\r\n                <div className=\"cron-label\">Start Time - </div>\r\n                <DropDown dropDownSelect={updateCron}\r\n                        dropDownTitle=\"Hour\"\r\n                        dropDownMap={hourMap}\r\n                        key=\"Hour\"\r\n                        resetRequest={() => {}}\r\n                        selected={markets.request.hour}\r\n                        className=\"cron-dd\"\r\n                />\r\n                <DropDown dropDownSelect={updateCron}\r\n                        dropDownTitle=\"Minute\"\r\n                        dropDownMap={minuteMap}\r\n                        key=\"Minute\"\r\n                        resetRequest={() => {}}\r\n                        selected={markets.request.minute}\r\n                        className=\"cron-dd\"\r\n                />\r\n            </div>\r\n            <div className=\"cron-dropdown-row\" id=\"cron-dropdown\">\r\n                <div className=\"cron-label\">End Time - </div>\r\n                <div className=\"cron-time-dropdowns\">\r\n                    <DropDown dropDownSelect={updateCron}\r\n                            dropDownTitle=\"Hour\"\r\n                            dropDownMap={endHourMap}\r\n                            key=\"endHour\"\r\n                            resetRequest={() => {}}\r\n                            selected={markets.request.endHour}\r\n                            className=\"cron-dd\"\r\n                    />\r\n                    <DropDown dropDownSelect={updateCron}\r\n                            dropDownTitle=\"Minute\"\r\n                            dropDownMap={endMinuteMap}\r\n                            key=\"endMinute\"\r\n                            resetRequest={() => {}}\r\n                            selected={markets.request.endMinute}\r\n                            className=\"cron-dd\"\r\n                    />\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n    var success = markets.success;\r\n\r\n    const marketKeys = Object.keys(markets.marketList)\r\n    const marketObj = (\r\n        marketKeys.map(key => {\r\n            let name = markets.marketList[key].name\r\n            return (\r\n                {\r\n                    class: \"tile small-tile\",\r\n                    name: name,\r\n                    css_id: name.replace(/\\s+/g, '-').toLowerCase(),\r\n                }\r\n            )\r\n        })\r\n    )\r\n\r\n    const tileName = () => {\r\n        if (!markets.selected) { return (\"Available Markets\") }\r\n        else if (markets.selected) { return (selectedTile) }\r\n        else { return (\"\") }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"cows\"></div>\r\n            <div className=\"order-form\">\r\n                <div className=\"form-top\">\r\n                    {selectedTile ? backButton : props.backButton}\r\n                    <span className=\"farm-name\">{tileName()}</span>\r\n                </div>\r\n                <div className=\"tile-container max-width\">\r\n                    <DefaultTiles tileDetails={marketObj}\r\n                                  backButton={backButton}\r\n                                  selectedComponent={selectedComponent}\r\n                                  setSelectedComponent={setSelectedComponent}\r\n                                  selectedTile={selectedTile}\r\n                                  setSelectedTile={setSelectedTile}\r\n                                  tileOnClick={setSelectedMarket}\r\n                                  nameSize=\"tile-name-small\"\r\n                    />\r\n                </div>\r\n                {markets.selected &&\r\n                    <div className=\"market-container\">\r\n                        <div className=\"market-overview\">\r\n                            {!!(markets.selected !== false) &&\r\n                                (<div className=\"market-rows\">{marketRows} {dropdowns}</div>)\r\n                            }\r\n                        </div>\r\n                        {!!markets.selected ?\r\n                            <div className=\"check-boxes\" id=\"market-checkboxes\">\r\n                                <span>Click items that are available at this market.</span>\r\n                                <RadioButton valuesObj={markets.request.farm_vegetable}\r\n                                             checkedObj={markets.selectedVegetables}\r\n                                             setSelected={setSelectedVegetable}\r\n                                             setList={setVegetableList}\r\n                                             requestKey=\"farm_vegetable\"\r\n                                             selectName=\"selected\"\r\n        />\r\n                            </div>\r\n                            : <div className=\"check-boxes\" id=\"market-checkboxes\"></div>\r\n                        }\r\n                    </div>\r\n                }\r\n                <div className=\"form-bottom\">\r\n                    {markets.selected && (\r\n                        <button type=\"submit\"\r\n                            className=\"default-button order-button\"\r\n                            onClick={() => {\r\n                                prepareRequest(markets.request, (param => param && param.length === 0))\r\n                                markets.request.name && setSelectedTile(markets.request.name)\r\n                                submitChanges(setLoading, setSuccess)\r\n                                setRefresh(!refresh)\r\n                            }\r\n                            }\r\n                            disabled={markets.loading}>\r\n                            { markets.loading && <RingLoader loading={markets.loading} />}\r\n                            { !markets.loading && <span>Submit Changes</span>}\r\n                        </button>)\r\n                    }\r\n                    {!!((success >= 200) & (success < 210)) && <span>Markets updated.</span>}\r\n                    {!!(success >= 400) && <span>An error has occurred. Please try again later.</span>}\r\n                </div>\r\n            </div>\r\n        </>\r\n    );\r\n}\r\n\r\nexport default Markets;\r\n","import React, { useState } from 'react';\r\nimport { DefaultCallbackPostRequest } from '../apiUtils/DefaultRequests';\r\nimport { useAuth } from '../auth.js';\r\n\r\n\r\nconst PaypalFinishConnect = ( props ) => {\r\n\r\n    const { authTokens } = useAuth();\r\n\r\n    const [success, setSuccess] = useState(false);\r\n    const [loading, setLoading] = useState(false);\r\n\r\n    const sendCode = DefaultCallbackPostRequest('connectPaypal/', props.paypalCode, authTokens);\r\n\r\n    return (\r\n        <div className=\"overlay\">\r\n            <div className=\"popout\">\r\n                <button type=\"submit\"\r\n                        className=\"default-button order-button finish-paypal-button\"\r\n                        onClick={async () => {sendCode(setLoading, setSuccess);\r\n                                              props.setPaypalCode(false);\r\n                                              props.setHideNav(false)\r\n                                            }\r\n                        }>\r\n                    <span>Complete Paypal Connection</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PaypalFinishConnect;\r\n","import React, { useState } from 'react';\r\nimport './styles/Buttons.css';\r\nimport './styles/HomePage.css';\r\nimport CustomerOrder from './CustomerView/CustomerOrder';\r\nimport Inventory from './FarmerView/Inventory';\r\nimport OrderView from './FormComponents/OrderView';\r\nimport Markets from './FarmerView/Markets';\r\nimport market_icon from './images/market.svg';\r\nimport history_icon from './images/order-history.svg';\r\nimport order_icon from './images/order.svg';\r\nimport PaypalFinishConnect from './Login/PaypalFinishConnect.js';\r\nimport DefaultTiles from './FormComponents/DefaultTiles.js';\r\n\r\nconst HomePage = ( props ) => {\r\n\r\n\tconst codeProp = props.location.state !== null ? props.location.state.paypalCode : false;\r\n\tconst is_farmer = localStorage.getItem(\"is_farmer\")\r\n\r\n\tconst [paypalCode, setPaypalCode] = useState(codeProp)\r\n\tconst [selectedTile, setSelectedTile] = useState(false)\r\n\tconst [selectedComponent, setSelectedComponent] = useState(false)\r\n\r\n\tconst backButton = (<button className=\"back-button\" \r\n\t\t\t\t\t\t\t\tid=\"back\" \r\n\t\t\t\t\t\t\t\tonClick={ () => {setSelectedTile(false)\r\n\t\t\t\t\t\t\t\t\t\t\t\t setSelectedComponent(false)\r\n\t\t\t\t\t\t\t\t\t\t\t\t} \r\n\t\t\t\t\t\t\t\t\t\t}><span></span></button>)\r\n\r\n\tconst farmer = {\r\n\t\t0: {\r\n\t\t\tclass: \"tile\",\r\n\t\t\tname: \"Inventory\",\r\n\t\t\tcss_id: \"inventory\",\r\n\t\t\tcomponent: <Inventory backButton={backButton}/>,\r\n\t\t\tcontent: <img src={order_icon} className={ \"icon\" } /> \r\n\t\t},\r\n\t\t1: {\r\n\t\t\tclass: \"tile\",\r\n\t\t\tname: \"Markets\",\r\n\t\t\tcss_id: \"markets\",\r\n\t\t\tcomponent: <Markets backButton={backButton}/>,\r\n\t\t\tcontent: <img src={market_icon} className={ \"icon\" } /> \r\n\t\t},\r\n\t\t2: {\r\n\t\t\tclass: \"tile\",\r\n\t\t\tname: \"Order Produce\",\r\n\t\t\tcss_id: \"customer-order\",\r\n\t\t\tcomponent: <CustomerOrder backButton={backButton} updateCart={props.updateCart}/>,\r\n\t\t\tcontent: <img src={order_icon} className={ \"icon\" } /> \r\n\t\t},\r\n\t\t3: {\r\n\t\t\tclass: \"tile\",\r\n\t\t\tname: \"Order History\",\r\n\t\t\tcss_id: \"order-history\",\r\n\t\t\tcomponent: <OrderView backButton={backButton}/>,\r\n\t\t\tcontent: <img src={history_icon} className={ \"icon\" } /> \r\n\t\t}\r\n\t}\r\n \tconst customer = {\r\n\t\t0: {\r\n\t\t\tclass: \"tile\",\r\n\t\t\tname: \"Order Produce\",\r\n\t\t\tcss_id: \"customer-order\",\r\n\t\t\tcomponent: <CustomerOrder backButton={backButton} updateCart={props.updateCart}/>,\r\n\t\t\tcontent: <img src={order_icon} className={ \"icon\" } /> \r\n\t\t},\r\n\t\t1: {\r\n\t\t\tclass: \"tile\",\r\n\t\t\tname: \"Order History\",\r\n\t\t\tcss_id: \"order-history\",\r\n\t\t\tcomponent: <OrderView backButton={backButton}/>,\r\n\t\t\tcontent: <img src={history_icon} className={ \"icon\" } /> \r\n\t\t}\r\n\t}\r\n\r\n\tlet obj = is_farmer === \"true\" ? farmer : customer;\r\n\r\n\treturn (\r\n\t\t\r\n\t\t<div className=\"homepage\">\r\n\t\t\t{(paypalCode && paypalCode !== \"connected\") ? <PaypalFinishConnect paypalCode={paypalCode} \r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   setPaypalCode={setPaypalCode}\r\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t   setHideNav={props.setHideNav}/> :\r\n\t\t\t<DefaultTiles tileDetails={obj} \r\n\t\t  \t\t\t\t  backButton={backButton}\r\n\t\t\t\t\t\t  selectedComponent={selectedComponent}\r\n\t\t\t\t\t\t  setSelectedComponent={setSelectedComponent}\r\n\t\t\t\t\t\t  selectedTile={selectedTile}\r\n\t\t\t\t\t\t  setSelectedTile={setSelectedTile}\r\n\t\t\t\t\t\t  nameSize={\"tile-name-large\"}\r\n\t\t\t/>\r\n\t\t\t}\r\n\t\t</div>\r\n\t\t\r\n\t)\r\n}\r\nexport default HomePage;","import React from 'react';\r\n\r\n\r\nconst About = () => (\r\n\t<div className=\"about-container\">\r\n  \t\t<div className=\"about-statement\">We are BeansTalk! Your digital farmstand. \r\n\t\t  Our mission is to provide a cheap and equitable service to farmers around the country.\r\n\t\t  We believe that supporting local agriculture is important on both an ecological and communal level.\r\n\t\t</div>\r\n  \t</div>\r\n)\r\n\r\nexport default About;","import React, { useState, useReducer } from 'react';\r\nimport { useAuth } from './auth.js';\r\nimport './styles/UserSettings.css';\r\nimport { DefaultCallbackPostRequest, DefaultEffectApiRequest} from './apiUtils/DefaultRequests';\r\nimport RingLoader from 'react-spinners';\r\n\r\n\r\nfunction UserSettings ( props ) {\r\n\r\n\tconst userData = [];\r\n\r\n\tfunction userReducer(state, newState) {\r\n\t\treturn{ ...state, ...newState }\r\n\t};\r\n\r\n\tconst [state, setState] = useReducer(userReducer, userData)\r\n\r\n\tconst handleSettingsChange = ( event ) =>\r\n\t  setState({[event.target.name]: event.target.value});\r\n\r\n\tconst { authTokens } = useAuth();\r\n\r\n\tDefaultEffectApiRequest('user/', 'GET', setState, authTokens)\r\n\r\n\t// keys for each part of the user settings\r\n\tconst accountKeys = [\"email\", \"username\", \"pass_button\"];\r\n\tconst basicInfoKeys = ['first_name', 'last_name', 'primary_phone', 'address'];\r\n\t// const billingKeys = ['farm'];\r\n\t// const notificationKeys = ['email'];\r\n\r\n\tconst [selectedSettings, setSelectedSettings] = useState(accountKeys)\r\n\tconst [loading, setLoading] = useState(false)\r\n\tconst [success, setSuccess] = useState(null)\r\n\r\n\t// renders user settings based on selected settings\r\n\tconst currentSettings = selectedSettings.map((key) => \r\n\t\t(key !== \"pass_button\" ? \r\n\t\t(<div className=\"user-settings\">  \t\t  \r\n\t\t  <label>{key}</label>\r\n\t\t  <input name={key}\r\n\t\t  \t\t type=\"text\"\r\n\t\t  \t\t value={state[key]}\r\n\t\t\t\t onChange={handleSettingsChange}\r\n\t\t  />\r\n\t\t</div>) :\r\n\t\t(<button className=\"forgot-password-link user-settings\"\r\n\t\t\t\tonClick={() => props.history.push('/forgotPassword')}>\r\n\t\t\t<span>Reset Password</span>\r\n\t\t</button>)\r\n\t\t)\r\n\t);\r\n\r\n\tconst updateSettings = DefaultCallbackPostRequest('user/', state, authTokens)\r\n\r\n\treturn (\r\n\t\t<div className=\"settings-page\">\r\n\t\t\t<div className=\"settings-box\">\r\n\t\t\t\t<div className=\"row\">\r\n\t\t\t\t\t<div className=\"col-lg-4\">\r\n\t\t\t\t\t\t<div className=\"settings-section\">\r\n\t\t\t\t\t\t\t<h3>Your Details</h3>\r\n\t\t\t\t\t\t\t<div>\r\n\t\t\t\t\t\t\t\t<button className={selectedSettings[0] === accountKeys[0] ? \"settings-section-selected\" : \"settings-section-button\"} \r\n\t\t\t\t\t\t\t\t        onClick={() => setSelectedSettings(accountKeys)}>Account</button>\r\n\t\t\t\t\t\t\t\t<button className={selectedSettings[0] === basicInfoKeys[0] ? \"settings-section-selected\" : \"settings-section-button\"} \r\n\t\t\t\t\t\t\t\t\t\tonClick={() => setSelectedSettings(basicInfoKeys)}>Basic Info</button>\r\n\t\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t\t<div className=\"settings-info\">\r\n\t\t\t\t\t\t\t{currentSettings}\r\n\t\t\t\t\t\t</div>\r\n\t\t\t\t\t</div>\r\n\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t\t<button type=\"submit\"\r\n              \t\tclassName=\"default-button\"\r\n\t\t\t\t\tonClick={ () => updateSettings(setLoading, setSuccess) }\r\n\t\t\t\t\tdisabled={ loading }  \r\n\t\t\t>\r\n        \t\t{ !loading && <span>Save Settings</span> }\r\n\t\t\t</button>\r\n\t\t\t{!!((success >= 200) & (success < 210)) && <span>Settings Successfully Changed</span>}\r\n\t    \t{!!(success >= 400) && <span>An error has occurred. Please try again later.</span>}\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default UserSettings;\r\n","import React, { useState, useReducer, useCallback } from 'react';\r\nimport Input from '../FormComponents/Input.js';\r\nimport '../styles/LoginPage.css';\r\nimport '../styles/FormContainer.css';\r\nimport { useAuth } from '../auth.js';\r\nimport { Redirect } from \"react-router-dom\";\r\nimport logo from '../images/brown-logo.svg';\r\n\r\n\r\nfunction LoginPage ( props ) {\t\r\n\t\r\n    const [loggedIn, setLoggedIn] = useState(false);\r\n\r\n\tconst { setAuthTokens } = useAuth();\r\n\r\n\tconst loginData = {\r\n\t\tusername: \"\",\r\n\t\tpassword: \"\"\r\n\t};\r\n\t\r\n\tfunction loginReducer(state, newState) {\r\n\t\treturn { ...state, ...newState }\r\n\t};\r\n\r\n\tconst [loginState, setLoginState] = useReducer(loginReducer, loginData);\r\n\tconst [success, setSuccess] = useState(false)\r\n\r\n\t\r\n\r\n\tlet hasCode = window.location.href.match(/code=.*/)\r\n\tlet paypalCode = hasCode ? hasCode[0].replace(/&scope=.*/, \"\").replace(/code=/, \"\") : false\r\n\r\n\tconst handleFormChange = ( event ) =>\r\n\t\tsetLoginState({[event.target.name]: event.target.value});\r\n\t\r\n\tconst compareKeys = (k1, k2) => { return JSON.stringify(k1) === JSON.stringify(k2) }\r\n\r\n\t//todo: refactor this callback to be in DefaultRequests.js\r\n\tconst handleLogin = useCallback(async () => {\r\n\t\tfetch(process.env.REACT_APP_API_URL + 'api-token-auth/', {\r\n\t\t\t   method: 'POST',\r\n\t\t\t   headers: { 'Content-Type': 'application/json' },\r\n\t\t\t   body: JSON.stringify(loginState)\r\n\t\t})\r\n\t\t  .then(res => res.json())\r\n\t\t  .then(json => { if(compareKeys(Object.keys(json), [\"token\", \"is_farmer\",\"is_customer\"])) {\r\n\t\t\t\t\t\t\tsetAuthTokens(json.token)\r\n\t\t\t\t\t\t\tlocalStorage.setItem('token', json.token)\r\n\t\t\t\t\t\t\tlocalStorage.setItem('is_farmer', json.is_farmer) // probably need to change this\r\n\t\t\t\t\t\t\tlocalStorage.setItem('is_customer', json.is_customer)\r\n\t\t\t\t\t\t\tsetLoggedIn(true)\r\n\t\t\t\t\t\t  } else {\r\n\t\t\t\t\t\t\tconsole.log(Object.keys(json))\r\n\t\t\t\t\t\t\tsetSuccess(json)\r\n\t\t\t\t\t\t  }\r\n\t\t\t\t\t\t})\r\n\t}, [loginState, setAuthTokens]);\r\n\r\n\r\n\tif (loggedIn) { return( <Redirect to={{pathname: '/app/home', state: { paypalCode: paypalCode }}}/> )}\r\n\r\n\tconst onEnter = (e) => {\r\n        if(e.key === 'Enter'){\r\n\t\t\tdocument.getElementById(\"login-button\").click()\r\n\t\t\tconsole.log(\"enter\")\r\n        }\r\n\t}\r\n\t\r\n\treturn ( \r\n\t\t<>\r\n\t\t<div className=\"login-container\">\r\n      \t\t<img src={logo} className={ \"logo\" } />\r\n\t\t\t  <div className=\"login-inputs\">\r\n\t\t\t\t<Input name=\"username\"\r\n\t\t\t\t\ttype=\"text\"\r\n\t\t\t\t\tvalue={loginState.username}\r\n\t\t\t\t\thandleChange={handleFormChange}\r\n\t\t\t\t\tplaceholder=\"Username\"\r\n\t\t\t\t\tclassName=\"login-input\"\r\n\t\t\t\t\tlabelClass=\"no-label\"\r\n\t\t\t\t\tonEnter={true}\r\n\t\t\t\t\t/>\r\n\t\t\t\t<Input name=\"password\"\r\n\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\tvalue={loginState.password}\r\n\t\t\t\t\thandleChange={handleFormChange}\r\n\t\t\t\t\tplaceholder=\"Password\"\r\n\t\t\t\t\tclassName=\"login-input\"\r\n\t\t\t\t\tlabelClass=\"no-label\"\r\n\t\t\t\t\tonEnter={true}\r\n\t\t\t\t\t/>\t\r\n             </div>\r\n\t\t\t\t<div className=\"login-button-container\">\r\n\t\t\t\t\t<button type=\"submit\"\r\n\t\t\t\t\t\tclassName=\"default-button login-button\"\r\n\t\t\t\t\t\tid=\"enter-button\"\r\n\t\t\t\t\t\tonClick={() => {handleLogin(loginState)\r\n\t\t\t\t\t\t\t\t\t\tpaypalCode && props.setHideNav(true)\r\n\t\t\t\t\t\t\t\t\t   }}\r\n\t\t\t\t\t\tonKeyPress={onEnter}>\r\n\t\t\t\t\t\t<span>Login</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName=\"default-button login-button\"\r\n\t\t\t\t\t\tid=\"login-button\"\r\n\t\t\t\t\t\tonClick={() => props.history.push('/signup')}>\r\n\t\t\t\t\t\t<span>Sign Up</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t\t<button \r\n\t\t\t\t\t\tclassName=\"forgot-password-link\"\r\n\t\t\t\t\t\tonClick={() => props.history.push('/forgotPassword')}>\r\n\t\t\t\t\t\t<span>Forgot Password</span>\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\r\n\t\t</div>\r\n\t\t<span className=\"connect-message\">{paypalCode && \"Please login to complete the paypal connection.\"}</span>\r\n\t\t{!!(success !== false) && <span className=\"error-message\"><div>An error has occurred. See below for details or try again later.</div></span>}\r\n\t\t{!!(success !== false) && <span className=\"error-message\">{ Object.keys(success).map(key => {return(<div>{key + ' ' + success[key]}</div>)} )}</span>}\r\n\t\t</>\r\n\t);\r\n}\r\n\r\nexport default LoginPage;\r\n\r\n\r\n","import React, { useState } from 'react';\r\nimport \"../styles/OrderForm.css\";\r\nimport { useAuth } from '../auth.js';\r\n\r\n\r\nconst PlaceOrderButton = ( props ) => {\r\n\r\n    return (\r\n    <>\r\n      {!props.shouldPaymentFormDisplay &&\r\n        <button type=\"submit\"\r\n          className=\"default-button\"\r\n          onClick={() => {\r\n                          props.orderFunc(props.setLoading, props.setSuccess, props.setOrderId)\r\n                          props.setShouldPaymentFormDisplay(!props.shouldPaymentFormDisplay)\r\n                          props.setStartTimer(true)\r\n                         } }>\r\n          <span>{props.buttonName}</span>\r\n        </button>}\r\n    </>\r\n    )\r\n\r\n}\r\n\r\nexport default PlaceOrderButton;\r\n","import React, { useState, useRef, useEffect } from 'react';\r\nimport { PaymentCallbackPostRequest} from '../apiUtils/DefaultRequests';\r\nimport { useAuth } from '../auth.js';\r\n\r\nfunction PaypalPayments( props ) {\r\n  const [error, setError] = useState(null);\r\n  const paypalRef = useRef();\r\n\r\n  const { authTokens } = useAuth()\r\n  \r\n  // states for payment post request\r\n  const [payLoading, setPayLoading] = useState(false)\r\n  const [success, setSuccess] = useState(false)\r\n  const submitPayment = PaymentCallbackPostRequest('makePayment/', authTokens)\r\n\r\n  \r\n  // create paypal buttons script\r\n  const [paypalExists, setPaypalExists] = useState(false)\r\n  const [loaded, setLoaded] = useState(false)\r\n\r\n  useEffect(() => {\r\n      if(!paypalExists) {\r\n          const ppScript = document.createElement(\"script\");\r\n          ppScript.src = \"https://www.paypal.com/sdk/js?client-id=AVqJ_v8BdeUPsTdm_XdCT68OlLHuxOt3Zaq_86ascEK_rac3XuyUKEX1GzQVqij-An6PQNoY5p1uVWv1&merchant-id=\" + props.merchantId;\r\n          ppScript.type = \"text/javascript\";\r\n          ppScript.setAttribute(\"data-namespace\", \"paypal_sdk\");\r\n          ppScript.onload = async () => { \r\n                                    setLoaded(true); \r\n                                    paypalRender()\r\n                                  };\r\n          document.getElementsByTagName(\"body\")[0].appendChild(ppScript);\r\n          setPaypalExists(true)\r\n      }\r\n  }, []);\r\n\r\n  const paypalRender = () => (\r\n    window.paypal_sdk\r\n      .Buttons({\r\n        createOrder: (data, actions) => {\r\n            return actions.order.create({\r\n              purchase_units: [\r\n              {\r\n                description: props.orderDetails.description,\r\n                amount: {\r\n                  currency_code: 'USD',\r\n                  value: props.orderDetails.price,\r\n                },\r\n              },\r\n              ],\r\n            });\r\n        },\r\n        onApprove: async (data, actions) => {\r\n          let paymentOrder = await actions.order.capture()\r\n          let paypalOrder = {\r\n            amount: paymentOrder.purchase_units[0].amount['value'],\r\n            paypal_merchant_id: paymentOrder.purchase_units[0].payee['merchant_id'],\r\n            paypal_order_id: paymentOrder.id,\r\n            paypal_payer_id: paymentOrder.payer.payer_id,\r\n            paypal_payment_id: data.paymentID,\r\n            payment_service: 'paypal',\r\n            order: props.orderId,\r\n            status: 'completed',\r\n            farm: props.farm.id\r\n          }\r\n          submitPayment(setPayLoading, setSuccess, paypalOrder)\r\n          props.deleteCart(props.cartKey)\r\n          props.setSelectedCart(false)\r\n          props.setStartTimer(false)\r\n          props.setCartSuccess(200)\r\n        },\r\n        onError: err => {\r\n            setError(err);\r\n        },\r\n      }).render(paypalRef.current)\r\n  ) \r\n\r\n  return (\r\n    <div className=\"paypal-buttons-container\">\r\n      {error && <div>Uh oh, an error occurred! {error.message}</div>}\r\n      <div ref={paypalRef}/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PaypalPayments;\r\n","import React, { useReducer, useState, useEffect } from 'react';\r\n\r\n\r\nconst CartTimer = ( props ) => {\r\n\r\n    const [minutes, setMinutes] = useState(10);\r\n    const [seconds, setSeconds] = useState(0);\r\n    const [isActive, setIsActive] = useState(props.startTimer);\r\n\r\n    useEffect(() => {\r\n        if (isActive) {\r\n        seconds > 0 && setTimeout(() => setSeconds(seconds - 1), 1000)\r\n        seconds === 0 && minutes === 0 && setIsActive(false) && props.deleteCart(props.cartKey)\r\n        seconds === 0 && setTimeout(() => {setMinutes(minutes - 1)\r\n                                           setSeconds(59)\r\n                                          }, 1000)\r\n        }\r\n    }, [seconds])\r\n\r\n    return (\r\n        <div>\r\n            {!isActive ? <h1>Your checkout time has expired. Please refill your cart and try again. Thank you!</h1> : \r\n                         <h1>Checkout Timer: {minutes}:{seconds < 10 ? `0${seconds}` : seconds}</h1> }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartTimer;\r\n","import React, { useReducer, useState, useEffect } from 'react';\r\nimport \"../styles/OrderForm.css\"; \r\nimport PlaceOrderButton from '../FormComponents/PlaceOrderButton.js';\r\nimport { useAuth } from '../auth.js';\r\nimport { DefaultCallbackPostRequest, DefaultEffectApiRequest } from '../apiUtils/DefaultRequests.js';\r\nimport PaypalPayments from '../PaymentForm/PaypalPayments.js';\r\nimport CartTimer from \"./CartTimer.js\";\r\n\r\n\r\nconst CartContent = ( props ) => {\r\n\r\n    const { authTokens } = useAuth()\r\n\r\n    const orderState = {\r\n        type: \"order\",\r\n        loading: false,\r\n        success: null,\r\n        update: \"update\",\r\n    };\r\n\r\n    function stateReducer(state, newState) {\r\n        return { ...state, ...newState }\r\n    };\r\n\r\n    // response handling\r\n    const selectedCart = props.selectedCart\r\n    const setSelectedCart = props.setSelectedCart\r\n\r\n    const [orderId, setOrderId] = useState(false)\r\n    const [order, setOrder] = useReducer(stateReducer, orderState)\r\n\r\n    const setLoading = (isLoading) => { setOrder({ loading: isLoading }) }\r\n    const setSuccess = (response) => { setOrder({ success: response }) }\r\n    const success = order.success\r\n\r\n    const vegetableRows = (cartKey) => {\r\n        let vegKeys = Object.keys(props.cart[cartKey].requested)\r\n        return (\r\n            vegKeys.map((key) => {\r\n                let amount = props.cart[cartKey].requested[key]\r\n                let veg_data = props.cart[cartKey].vegetables.find(el => key === el.vegetable_name)\r\n                let price = veg_data.price * amount\r\n            return (\r\n                <div className=\"cart-row-contents\">\r\n                    <div className=\"cart-vegetable-row\">\r\n                        <div className=\"cart-row-column\">\r\n                            <span className=\"vegetable-name\">{ key }</span>\r\n                            <span className=\"cart-details\">{amount + \" \" + veg_data.unit_weight}</span>\r\n                            <span className=\"cart-details\">{\"$\" + price}</span>\r\n                        </div>\r\n                    </div>  \r\n                    <button className=\"remove-button\"\r\n                            onClick={() => {props.removeFromCart(cartKey, key)\r\n                                            setOrder({update: \"update\"})\r\n                                            props.cart[selectedCart] === undefined && setSelectedCart(Object.keys(props.cart)[0])\r\n                                           }\r\n                            }>\r\n                        <span>x</span>\r\n                    </button>\r\n                </div>\r\n            )}\r\n        )\r\n        )\r\n    }\r\n\r\n    let tempCart = JSON.parse(JSON.stringify(props.cart[selectedCart]))\r\n    tempCart.market = parseInt(selectedCart.split(\"/\")[1])\r\n    let submitOrder = DefaultCallbackPostRequest('formDetailsPost/', [order.type, tempCart], authTokens)\r\n    let farm = props.cart[selectedCart].farm\r\n    let market = props.cart[selectedCart].market\r\n    let price = {'price': props.cart[selectedCart].price}\r\n\r\n    let [merchantId, setMerchantId] = useState(false)\r\n    let body = JSON.stringify({farm: farm.id})\r\n    console.log(body)\r\n\r\n    DefaultEffectApiRequest(\"getMerchantId/\", \"POST\", setMerchantId, authTokens, selectedCart, body)\r\n\r\n    const paymentForm = <PaypalPayments orderDetails={price} \r\n                                        farm={farm}\r\n                                        merchantId={merchantId} \r\n                                        orderId={orderId} \r\n                                        cartKey={selectedCart}\r\n                                        deleteCart={props.deleteCart}\r\n                                        setSelectedCart={props.setSelectedCart}\r\n                                        setStartTimer={props.setStartTimer}\r\n                                        setCartSuccess={props.setCartSuccess}\r\n                        />\r\n    const cartRows = (\r\n            <div className=\"cart-row\">\r\n                <span className=\"farm-market-name\">{farm.name + \" at \" + market}</span>\r\n                {vegetableRows(selectedCart)}  \r\n                <h1>Total Price: ${price.price}</h1>           \r\n                <PlaceOrderButton buttonName=\"Checkout with Paypal\" \r\n                                  orderFunc={submitOrder}\r\n                                  setLoading={setLoading}\r\n                                  setSuccess={setSuccess}\r\n                                  setOrderId={setOrderId}\r\n                                  setStartTimer={props.setStartTimer}\r\n                                  orderId={orderId}\r\n                                  setShouldPaymentFormDisplay={props.setShouldPaymentFormDisplay}\r\n                                  shouldPaymentFormDisplay={props.shouldPaymentFormDisplay}\r\n                />\r\n            </div>\r\n    )\r\n\r\n    return (\r\n        <div className=\"cart-row-container\">\r\n            {cartRows}\r\n            {props.startTimer && <CartTimer startTimer={props.startTimer}\r\n                                            deleteCart={props.deleteCart}\r\n                                            cartKey={props.cartKey}\r\n            />}\r\n            {props.shouldPaymentFormDisplay && orderId && paymentForm}\r\n\t    \t{!!(success >= 400) && <span>An error has occurred. Please try again later.</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CartContent;\r\n","import React, { useState } from 'react';\r\nimport \"../styles/OrderForm.css\"; \r\nimport CartContent from './CartContent.js';\r\nimport { PaymentCallbackPostRequest } from '../apiUtils/DefaultRequests';\r\nimport { useAuth } from \"../auth.js\";\r\n\r\nconst Cart = ( props ) => {\r\n\r\n    const { authTokens } = useAuth()\r\n\r\n    const selectedCart = props.selectedCart\r\n    const setSelectedCart = props.setSelectedCart\r\n    const [shouldPaymentFormDisplay, setShouldPaymentFormDisplay] = useState(false);\r\n    const [startTimer, setStartTimer] = useState(false);\r\n    const [success, setSuccess] = useState(false)\r\n\r\n    // request to post vegetable orders\r\n    const cartKeys = Object.keys(props.cart)\r\n\r\n    const cartBar = (\r\n        cartKeys.map(key => {\r\n            let buttonClass = (key === selectedCart) ? 'cart-bar-button-selected' : 'cart-bar-button'\r\n            return(\r\n            <div>\r\n                <button className={buttonClass}\r\n                        onClick={() => { setSelectedCart(key)\r\n                                         setShouldPaymentFormDisplay(false)\r\n                                         setStartTimer(false)\r\n                                         setSuccess(false)\r\n                                       }\r\n                        }>\r\n                        <span>{props.cart[key].farm.name+ ' at ' + props.cart[key].market}</span>\r\n                </button>\r\n            </div>\r\n        )})\r\n    )\r\n\r\n    return (\r\n        <div className=\"cart-container\">\r\n            <div className=\"selected-tile\" id=\"selected-tile\">\r\n                <span className=\"tile-name-large\">Cart</span>\r\n                <div className=\"cart-bar\">{cartBar}</div>\r\n                {props.cart === \"\" && !success && <span>Your Cart is Empty</span>}\r\n                {!!((success >= 200) & (success < 210)) && <span>Order placed. You should be receiving a confirmation email shortly.</span>}\r\n\t    \t    {!!(success >= 400) && <span>An error has occurred. Please try again later.</span>}\r\n                {selectedCart && <CartContent selectedCart={selectedCart}\r\n                                              cart={props.cart}\r\n                                              removeFromCart={props.removeFromCart}\r\n                                              deleteCart={props.deleteCart}\r\n                                              setSelectedCart={setSelectedCart}\r\n                                              shouldPaymentFormDisplay={shouldPaymentFormDisplay}\r\n                                              setShouldPaymentFormDisplay={setShouldPaymentFormDisplay}\r\n                                              startTimer={startTimer}\r\n                                              setStartTimer={setStartTimer}\r\n                                              setCartSuccess={setSuccess}\r\n                                 />}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Cart;\r\n","import React, { useState } from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\nimport Header from './Header.js';\r\nimport HomePage from './HomePage.js';\r\nimport About from './About/AboutPage.js';\r\nimport UserSettings from './UserSettings.js';\r\nimport LoginPage from './Login/LoginPage.js';\r\nimport Cart from './CustomerView/Cart.js';\r\n\r\n\r\nconst PrimaryLayout = ( props ) => {\r\n\r\n  const [cart, setCart] = useState('');\r\n  const [selectedCart, setSelectedCart] = useState(false)\r\n\r\n  const updateCart = ( order, vegetables, farm, market, price ) => {\r\n      setCart({...cart, [order.farm_plus_market]: {'requested': order.requested,\r\n                                                  'vegetables': vegetables,\r\n                                                  'farm': farm,\r\n                                                  'market': market,\r\n                                                  'status': 'processing',\r\n                                                  'price': price\r\n                                                  }\r\n      \r\n      })\r\n  };\r\n\r\n  const removeFromCart = (key, vegetable) => {delete cart[key].requested[vegetable]\r\n                                              Object.keys(cart[key].requested).length === 0 && setSelectedCart(false) \r\n                                              Object.keys(cart[key].requested).length === 0 && delete cart[key]\r\n                                              Object.keys(cart).length === 0 && setSelectedCart(false)\r\n                                              Object.keys(cart).length === 0 && setCart('')\r\n  }\r\n\r\n  const deleteCart = (key) => { setSelectedCart(false)\r\n                                delete cart[key]\r\n                                Object.keys(cart).length === 0 && setCart('')\r\n  }\r\n    \r\n  const add = (a, b) => a + b\r\n  const cartKeys = Object.keys(cart)\r\n  const nVegetables = cart !== '' && cartKeys.map(key => {return Object.keys(cart[key].requested).length}).reduce(add)\r\n\r\n  let setHideNav = props.setHideNav\r\n\r\n  return (\r\n    <div className=\"primary-layout\">\r\n    <Header nVegetables={nVegetables} hideNav={props.hideNav}/>\r\n      <main>\r\n        <Switch>\r\n          <Route path={`${props.match.path}/home`} render={(props) => <HomePage {...props} updateCart={updateCart} setHideNav={setHideNav} />} />\r\n          <Route path={`${props.match.path}/about`} component={ About } />\r\n          <Route path={`${props.match.path}/settings`} component={ UserSettings } />\r\n          <Route path={`${props.match.path}/cart`} render={(props) => <Cart {...props} cart={cart} \r\n                                                                                 removeFromCart={removeFromCart} \r\n                                                                                 deleteCart={deleteCart}\r\n                                                                                 selectedCart={selectedCart}\r\n                                                                                 setSelectedCart={setSelectedCart}\r\n                                                                />} \r\n          />\r\n          <Route path={`${props.match.path}/login`} render={( props ) => <LoginPage {...props} setHideNav={props.setHideNav} />} />\r\n          <Redirect to={`${props.match.url}`} />\r\n        </Switch>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default PrimaryLayout;\r\n","import React from \"react\";\r\nimport { Route, Redirect } from \"react-router-dom\";\r\nimport { useAuth } from \"../auth.js\";\r\n\r\n\r\nfunction PrivateRoute({ component: Component, ...rest }) {\r\n  const { authTokens } = useAuth();\r\n\r\n  return (\r\n    <Route {...rest} render={( props ) => authTokens ? ( <Component {...props} {...rest} /> ) : \r\n                                                       ( <Redirect to=\"/login\" /> )\r\n                            }\r\n    />\r\n  );\r\n}\r\n\r\nexport default PrivateRoute;\r\n","import React, { useState, useEffect } from 'react';\r\n\r\nconst PaypalIdentity = ( props ) => {\r\n\r\n    const [identityExists, setIdentityExists] = useState(false);\r\n    const [loaded, setLoaded] = useState(false);\r\n    const paypalRedirectUrl=process.env.REACT_APP_PAYPAL_REDIRECT_URL+\"login\";\r\n\r\n    useEffect(() => {\r\n        if(!identityExists){\r\n            const identityScript = document.createElement(\"script\");\r\n            identityScript.id = \"ppIdentity\"\r\n            identityScript.src =  'https://www.paypalobjects.com/js/external/connect/api.js'\r\n            identityScript.type = \"text/javascript\";\r\n            identityScript.onload = () => { setLoaded(true); \r\n                                            setIdentityExists(true);\r\n                                          };\r\n            document.getElementsByTagName(\"body\")[0].appendChild(identityScript)\r\n        }\r\n    }, []\r\n    )\r\n\r\n    const PaypalRender = (loaded & !identityExists) ? (\r\n        window.paypal.use( ['login'], function (login) {\r\n            login.render ({\r\n            \"appid\":\"AVqJ_v8BdeUPsTdm_XdCT68OlLHuxOt3Zaq_86ascEK_rac3XuyUKEX1GzQVqij-An6PQNoY5p1uVWv1\",\r\n            \"authend\":\"sandbox\",\r\n            \"scopes\":[\"openid\"],\r\n            \"containerid\":\"cwppButton\",\r\n            \"responseType\":\"code\",\r\n            \"locale\":\"en-us\",\r\n            \"buttonType\":\"CWP\",\r\n            \"buttonShape\":\"pill\",\r\n            \"buttonSize\":\"lg\",\r\n            \"fullPage\":\"true\",\r\n            \"returnurl\":paypalRedirectUrl\r\n            });\r\n        })\r\n    ) : (null)\r\n\r\n    return (\r\n        <span id='cwppButton'></span>\r\n    )}\r\n\r\nexport default PaypalIdentity;\r\n","import React, { useReducer, useCallback, useState, useEffect } from 'react';\r\nimport Input from '../FormComponents/Input.js';\r\nimport '../styles/LoginPage.css';\r\nimport PaypalIdentity from './PapalIdentity.js';\r\nimport { RingLoader } from 'react-spinners';\r\nimport { useAuth } from '../auth.js';\r\nimport logo from '../images/brown-logo.svg';\r\n\r\nfunction Signup ( props ) {\t\r\n\r\n    const { authTokens } = useAuth()\r\n\r\n\tconst signupData = {\r\n        \"is_farmer\": false,\r\n        \"is_customer\": false,\r\n        \"farm\": \"\",\r\n        \"secondary_phone\": \"None\",\r\n        \"is_staff\": false,\r\n        \"is_superuser\": false,\r\n        \"created_by\": \"client\",\r\n        \"updated_by\": \"client\",\r\n    };\r\n\t\r\n\tfunction signupReducer(state, newState) {\r\n\t\treturn { ...state, ...newState }\r\n\t};\r\n\r\n\tconst [state, setState] = useReducer(signupReducer, signupData);\r\n\r\n\tconst handleFormChange = ( event ) =>\r\n        setState({[event.target.name]: event.target.value});\r\n\r\n    const [signupFields, setSignupFields] = useState([\"email\", \"username\", \"password\", \"first_name\", \"last_name\", \"primary_phone\", \"address\"])\r\n    const [success, setSuccess] = useState(false);\r\n    const [status, setStatus] = useState(false);\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const signupInputs = (signupFields) => signupFields.map((key) =>\r\n        <Input name={key}\r\n               type={key === \"password\" ? key : \"text\"}\r\n               value={state.key}\r\n               handleChange={handleFormChange}\r\n               placeholder={key}\r\n               className=\"login-input\"\r\n        />\r\n    );\r\n\r\n    const processResponse = (response) => {\r\n        const statusCode = response.status;\r\n        const data = response.json();\r\n        return Promise.all([statusCode, data]).then(res => ({\r\n                                                    statusCode: res[0],\r\n                                                    data: res[1]\r\n                                                    }));\r\n      };\r\n\r\n    const handleSignup = useCallback(async () => {\r\n        setLoading(true)\r\n\t\tfetch(process.env.REACT_APP_API_URL + 'userCreate/', {\r\n\t\t\t  method: 'POST',\r\n\t\t\t  headers: { 'Content-Type': 'application/json' },\r\n\t\t\t  body: JSON.stringify(state)\r\n\t\t})\r\n        .then(processResponse)\r\n        .then(res => {\r\n            const {statusCode, data} = res\r\n            setStatus(statusCode)\r\n            setSuccess(data)})\r\n        setLoading(false)\r\n\t}, [state]);\r\n\r\n    const connectPaypal = (\r\n        <div className=\"paypal-signup\">\r\n            <span className=\"signup-question\">If you would like to receive payments, please connect your paypal account.</span>\r\n            <PaypalIdentity />\r\n        </div>\r\n    )\r\n\r\nreturn ( \r\n\r\n    <div className=\"signup-container\">\r\n      \t<img src={logo} className={ \"logo\" } />\r\n    {!(state.is_farmer | state.is_customer) && !(state.is_farmer && status && status < 210) && (\r\n        <div className=\"login-inputs\">\r\n            <span className=\"signup-question\">Who are you?</span>\r\n            <div className=\"signup-button-container\">\r\n                <button type=\"submit\"\r\n                        className=\"default-button signup-button\"\r\n                        onClick={() => setState({\"is_farmer\": true},\r\n                                    signupFields.push(\"farm\")\r\n                        )}>\r\n                    <span>Farmer</span>\r\n                </button>\r\n                <button type=\"submit\"\r\n                        className=\"default-button signup-button\"\r\n                        onClick={() => setState({\"is_customer\": true})}>\r\n                    <span>Customer</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )}\r\n\r\n    {!!(state.is_farmer | state.is_customer) && !(state.is_farmer && status && status < 210) && (\r\n        <div className=\"signup\">\r\n            <div className=\"signup-inputs\">\r\n                {signupInputs(signupFields)}\r\n            </div>\r\n            <div className=\"signup-button-container\">\r\n                <button type=\"submit\"\r\n                        className=\"default-button\"\r\n                        onClick={() => handleSignup(state)}>\r\n                    <span>Create Account</span>\r\n                </button>\r\n                <button type=\"submit\"\r\n                        className=\"default-button\"\r\n                        onClick={() => props.history.push('/login')}>\r\n                    <span>Back to Login</span>\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n    }\r\n    {!!(status === 201) && <span>Account created, please verify your email before logging in.</span>}\r\n    {!!((status !== 201) && (success !== false)) && <span>An error has occurred.</span>}\r\n    {!!((success !== false) && (status !== 201)) && <span>{ Object.keys(success).map(key => {return(<div>{key + ': ' + success[key]}</div>)} )}</span>}\r\n    {loading && <RingLoader loading={loading}/>}\r\n    {state.is_farmer && status && status < 210 && connectPaypal}\r\n    </div>\r\n\r\n);\r\n}\r\n\r\nexport default Signup;\r\n\r\n","import React, { useState, useReducer } from 'react';\r\nimport Input from './FormComponents/Input.js'\r\nimport { ResetPasswordCallbackPostRequest } from './apiUtils/DefaultRequests.js';\r\nimport logo from './images/brown-logo.svg';\r\n\r\nconst PasswordReset = ( props ) => {\r\n\r\n\tlet token_array = window.location.href.match('(?<=token=)(.*)');\r\n\tlet token = token_array ? token_array[0]: null;\r\n\r\n\r\n\tlet initialState = {password: \"\", confirmPassword: \"\"}\r\n\tlet stateReducer = (state, newState) => {\r\n\t\treturn {...state, ...newState}\r\n\r\n\t}\r\n\r\n\t\r\n\tlet [passwordState, setPasswordState] = useReducer(stateReducer, initialState);\r\n\r\n\tlet [loading, setLoading] = useState(false)\r\n\tlet [success, setSuccess] = useState(false)\r\n\r\n\r\n\tlet createBodyData = () => {\r\n\t\tlet bodyData;\r\n\t\tif (passwordState.password === passwordState.confirmPassword && token) {\r\n\t        let bodyData = {\r\n\t        \t\"token\": token,\r\n\t        \t\"password\": passwordState.password\r\n\t\t\t}\r\n        return bodyData;\r\n\t}\r\n}\r\n\r\n    const handlePasswordChange = ( event ) =>\r\n        setPasswordState({[event.target.name]: event.target.value});\r\n\r\n\tlet resetPasswordRequest = ResetPasswordCallbackPostRequest(\"passwordReset/confirm/\");\r\n\r\n\treturn (\r\n\t\t<div className=\"password-reset-container\">\r\n      \t\t<img src={logo} className={ \"logo\" } />\r\n\t\t\t<div className=\"password-reset-input-container\">\r\n\t\t\t\t<Input\r\n\t\t\t\t\tname=\"password\"\r\n\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\tvalue={passwordState.password}\r\n\t\t\t\t\thandleChange={handlePasswordChange}\r\n\t\t\t\t\tclassName=\"login-input\"\r\n\t\t\t\t\tplaceholder=\"New Password\"\r\n\t\t\t\t\tonEnter={true}\r\n\t\t\t\t/>\r\n\t\t\t\t<Input\r\n\t\t\t\t\tname=\"confirmPassword\"\r\n\t\t\t\t\ttype=\"password\"\r\n\t\t\t\t\tvalue={passwordState.confirmPassword}\r\n\t\t\t\t\thandleChange={handlePasswordChange}\r\n\t\t\t\t\tclassName=\"login-input\"\r\n\t\t\t\t\tplaceholder=\"Confirm Password\"\r\n\t\t\t\t\tonEnter={true}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t\t<div className=\"password-reset-button-container\">\r\n\t\t\t\t<button type=\"submit\"\r\n\t\t\t\t\tclassName=\"default-button login-button\"\r\n\t\t\t\t\tid=\"enter-button\"\r\n\t\t\t\t\tonClick={() => {resetPasswordRequest(setLoading, setSuccess, createBodyData())}}>\r\n\t\t\t\t\t<span>Reset Password</span>\r\n\t\t\t\t</button>\r\n                <button type=\"submit\"\r\n                        className=\"default-button login-button\"\r\n                        onClick={() => props.history.push('/login')}>\r\n                    <span>Back to Login</span>\r\n                </button>\r\n\t\t\t</div>\r\n\t\t\t<br/>\r\n\t\t\t{!!(success !== false) && success !== \"OK\" && <span className=\"error-message\"><div>An error has occurred. See below for details or try again later.</div></span>}\r\n\t\t\t{!!(success !== false) && success !== \"OK\" && <span className=\"error-message\"><div>{success}</div></span>}\r\n\t\t\t{!!(success === \"OK\") && <span className=\"error-message\"><div>Password successfully changed.</div></span>}\r\n\t\t</div>\r\n    );\r\n\r\n\r\n\r\n\t\r\n\r\n}\r\nexport default PasswordReset;","import React, { useState } from 'react';\r\nimport Input from './FormComponents/Input.js'\r\nimport { ResetPasswordCallbackPostRequest } from './apiUtils/DefaultRequests.js';\r\nimport logo from './images/brown-logo.svg';\r\n\r\nconst ForgotPassword = ( props ) => {\r\n\r\n    let [email, setEmail] = useState('')\r\n\r\n\tlet [loading, setLoading] = useState(false)\r\n\tlet [success, setSuccess] = useState(false)\r\n\r\n\r\n\tlet createBodyData = () => {\r\n        let bodyData = { \"email\": email }\r\n        return bodyData;\r\n\t}\r\n\r\n\tlet resetPasswordRequest = ResetPasswordCallbackPostRequest(\"passwordReset/\");\r\n\r\n\treturn (\r\n        <div className=\"password-reset-container\">\r\n      \t\t<img src={logo} className={ \"logo\" } />\r\n            <Input\r\n                name=\"email\"\r\n                type=\"input\"\r\n                value={email}\r\n                handleChange={(event) => setEmail(event.target.value)}\r\n                className=\"login-input\"\r\n                placeholder=\"Enter your email\"\r\n                onEnter={true}\r\n            />\r\n            <div className=\"password-reset-button-container\">\r\n                <button type=\"submit\"\r\n                    className=\"default-button login-button\"\r\n                    id=\"enter-button\"\r\n                    onClick={() => {resetPasswordRequest(setLoading, setSuccess, createBodyData())}}>\r\n                    <span>Submit</span>\r\n                </button>\r\n                <button type=\"submit\"\r\n                        className=\"default-button login-button\"\r\n                        onClick={() => props.history.push('/login')}>\r\n                    <span>Back to Login</span>\r\n                </button>\r\n            </div>\r\n            <br/>\r\n            {!!(success !== false) && success !== \"OK\" && <span className=\"error-message\"><div>An error has occurred. See below for details or try again later.</div></span>}\r\n\t\t\t{!!(success !== false) && success !== \"OK\" && <span className=\"error-message\"><div>{success}</div></span>}\r\n            {!!(success === \"OK\") && <span className=\"error-message\"><div>A password reset link has been sent to your email.</div></span>}\r\n        </div>\r\n    );\r\n\r\n}\r\nexport default ForgotPassword;","import React, { useState } from 'react';\r\nimport './styles/App.css';\r\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\r\nimport PrimaryLayout from './PrimaryLayout.js';\r\nimport PrivateRoute from './Login/PrivateRoute.js';\r\nimport LoginPage from './Login/LoginPage.js';\r\nimport Signup from './Login/Signup.js';\r\nimport { AuthContext } from './auth.js';\r\nimport PasswordReset from './PasswordReset.js';\r\nimport ForgotPassword from './ForgotPassword.js';\r\n\r\nfunction App() {\r\n\r\n  const [authTokens, setAuthTokens] = useState();\r\n  \r\n  const setTokens = ( data ) => {\r\n    setAuthTokens(data);\r\n  }\r\n\r\n  let [hideNav, setHideNav] = useState(false);\r\n\r\n  return (\r\n    <div className=\"App\">\r\n    <AuthContext.Provider value={{ authTokens, setAuthTokens: setTokens }}>\r\n      <BrowserRouter>\r\n\t      <Switch>\r\n\t\t      <Route path=\"/login\" render={( props ) => <LoginPage {...props} setHideNav={setHideNav} hideNav={hideNav} />} />\r\n          <Route path=\"/signup\" component={ Signup } />\r\n          <Route path=\"/passwordReset\" component={ PasswordReset } />\r\n          <Route path=\"/forgotPassword\" component={ ForgotPassword } />\r\n\t\t      <PrivateRoute path=\"/app\" component={ PrimaryLayout } setHideNav={setHideNav} hideNav={hideNav}/>\r\n        </Switch>\r\n\t    </BrowserRouter>\r\n\t  </AuthContext.Provider>\r\n    </div>\r\n\r\n  );\r\n}\r\n\r\nexport default App;\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n\r\n"],"sourceRoot":""}